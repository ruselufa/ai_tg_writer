package api

import (
	"ai_tg_writer/internal/infrastructure/bot"
	"ai_tg_writer/internal/infrastructure/database"
	"ai_tg_writer/internal/infrastructure/yookassa"
	"ai_tg_writer/internal/service"
	"encoding/json"
	"log"
	"net/http"
	"os"
	"strconv"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/gorilla/mux"
)

type YooKassaHandler struct {
	subs *service.SubscriptionService
	db   *database.DB
	yc   *yookassa.Client
	bot  *bot.Bot
}

func NewYooKassaHandler(subs *service.SubscriptionService, db *database.DB, bot *bot.Bot) *YooKassaHandler {
	return &YooKassaHandler{subs: subs, db: db, yc: yookassa.New(), bot: bot}
}

// 6.1 –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤–∏—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫–∞—Ä—Ç—ã
// POST /yookassa/init?user_id=123&amount=990.00
func (h *YooKassaHandler) CreateInit(w http.ResponseWriter, r *http.Request) {
	userID := r.URL.Query().Get("user_id")
	amount := r.URL.Query().Get("amount")
	if userID == "" || amount == "" {
		http.Error(w, "user_id and amount required", http.StatusBadRequest)
		return
	}
	idem := time.Now().UTC().Format("20060102T150405.000000000Z") + "-" + userID
	retURL := os.Getenv("YK_RETURN_URL_BASE")
	payment, err := h.yc.CreateInitialPayment(
		idem,
		yookassa.Amount{Value: amount, Currency: "RUB"},
		"–ü–æ–¥–ø–∏—Å–∫–∞ AI TG Writer",
		userID,
		retURL,
		map[string]string{"tg_user_id": userID},
	)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadGateway)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(payment)
}

// 6.2 –í–µ–±—Ö—É–∫
// URL: POST /yookassa/webhook
func (h *YooKassaHandler) Webhook(w http.ResponseWriter, r *http.Request) {
	var evt struct {
		Event  string         `json:"event"`
		Object map[string]any `json:"object"`
	}
	if err := json.NewDecoder(r.Body).Decode(&evt); err != nil {
		http.Error(w, "bad json", http.StatusBadRequest)
		return
	}
	log.Printf("=== YooKassa Webhook Received ===")
	log.Printf("Event: %s", evt.Event)
	log.Printf("Object: %+v", evt.Object)

	// –ü–æ–ª—É—á–∏–º –ø–ª–∞—Ç–µ–∂, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å—Ç–∞—Ç—É—Å
	id, _ := evt.Object["id"].(string)
	if id == "" {
		log.Printf("‚ùå Payment ID not found in webhook object")
		w.WriteHeader(http.StatusOK)
		return
	}
	log.Printf("Payment ID from webhook: %s", id)

	payment, err := h.yc.GetPayment(id)
	if err != nil {
		log.Printf("‚ùå YK get payment err: %v", err)
		w.WriteHeader(http.StatusOK)
		return
	}
	log.Printf("=== Payment Details from YooKassa API ===")
	log.Printf("Payment ID: %s", id)
	log.Printf("Full payment response: %+v", payment)

	status, _ := payment["status"].(string)
	log.Printf("Payment Status: %s", status)

	if status == "succeeded" {
		log.Printf("‚úÖ Payment succeeded, processing...")

		// –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
		meta, _ := payment["metadata"].(map[string]any)
		tgUser := ""
		if meta != nil {
			log.Printf("Metadata: %+v", meta)
			if v, ok := meta["tg_user_id"].(string); ok {
				tgUser = v
				log.Printf("TG User ID from metadata: %s", tgUser)
			}
		}

		// payment_method.id
		pm := ""
		if pmObj, ok := payment["payment_method"].(map[string]any); ok {
			log.Printf("Payment Method: %+v", pmObj)
			if v, ok := pmObj["id"].(string); ok {
				pm = v
				log.Printf("Payment Method ID: %s", pm)
			}
		}

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º customerID = telegram user ID (metadata)
		customerID := tgUser

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å tg_user_id –∏ payment_method.id
		if customerID != "" && pm != "" {
			log.Printf("‚úÖ Required data found, saving binding (customerID = TG user)...")

			// –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É
			amountValue := 0.0
			if amt, ok := payment["amount"].(map[string]any); ok {
				if val, ok := amt["value"].(string); ok {
					if f, err := strconv.ParseFloat(val, 64); err == nil {
						amountValue = f
					}
				}
			}

			if uid, err := strconv.ParseInt(customerID, 10, 64); err == nil {
				if err := h.subs.SaveYooKassaBindingAndActivate(uid, customerID, pm, id, amountValue); err != nil {
					log.Printf("‚ùå Save binding error: %v", err)
				} else {
					log.Printf("‚úÖ Binding saved and subscription activated successfully")

					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram
					h.sendSubscriptionActivatedMessage(uid)
				}
			} else {
				log.Printf("‚ùå Failed to parse TG User ID: %v", err)
			}
		} else {
			log.Printf("‚ùå Missing required data: tg_user_id=%s, payment_method_id=%s", customerID, pm)
		}
	} else {
		log.Printf("‚ö†Ô∏è Payment status is not 'succeeded': %s", status)
	}

	log.Printf("=== End Webhook Processing ===")
	w.Write([]byte("ok"))
}

// 6.3 –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ (—Ç–µ—Å—Ç —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–∞)
// POST /yookassa/charge?user_id=123&amount=990.00
func (h *YooKassaHandler) Charge(w http.ResponseWriter, r *http.Request) {
	userID := r.URL.Query().Get("user_id")
	amount := r.URL.Query().Get("amount")
	if userID == "" || amount == "" {
		http.Error(w, "user_id and amount required", http.StatusBadRequest)
		return
	}
	// –¥–æ—Å—Ç–∞—Ç—å –∏–∑ –ë–î yk_customer_id, yk_payment_method_id
	// ...
	idem := time.Now().UTC().Format("20060102T150405.000000000Z") + "-rec-" + userID
	payment, err := h.yc.CreateRecurringPayment(
		idem,
		yookassa.Amount{Value: amount, Currency: "RUB"},
		"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ AI TG Writer",
		/*customerID*/ userID,
		/*paymentMethodID*/ "pm_xxx",
		map[string]string{"tg_user_id": userID},
	)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadGateway)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(payment)
}

// sendSubscriptionActivatedMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
func (h *YooKassaHandler) sendSubscriptionActivatedMessage(userID int64) {
	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
	// text := "üéâ *–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!*\n\n" +
	// 	"‚úÖ Premium –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞\n" +
	// 	"üöÄ –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n" +
	// 	"‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤\n" +
	// 	"‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤\n" +
	// 	"‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n" +
	// 	"‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã\n\n" +
	// 	"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Premium! üíé"

	text := "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –¢—ã –≤ –æ–¥–Ω–æ–º —à–∞–≥–µ –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.\n\n" +
		"–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–æ:\n\n" +

		"‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤.\n" +
		"‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n" +
		"‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤\n" +
		"‚Ä¢ –†–µ—Ä–∞–π—Ç–∏–Ω–≥ –ø–æ—Å—Ç–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ –≤ –¢–µ–ª–µ–≥—Ä–∞–º\n" +
		"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏\n" +

		"–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! \n"

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", "create_post"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "profile"),
			tgbotapi.NewInlineKeyboardButtonData("üíé –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", "subscription"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùì –ü–æ–º–æ—â—å", "help"),
		),
	)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	msg := tgbotapi.NewMessage(userID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = &keyboard

	if _, err := h.bot.Send(msg); err != nil {
		log.Printf("‚ùå Error sending subscription activated message to user %d: %v", userID, err)
	} else {
		log.Printf("‚úÖ Subscription activated message sent to user %d", userID)
	}
}

func (h *YooKassaHandler) SetupRoutes(r *mux.Router) {
	r.HandleFunc("/yookassa/init", h.CreateInit).Methods("POST")
	r.HandleFunc("/yookassa/webhook", h.Webhook).Methods("POST")
	r.HandleFunc("/yookassa/charge", h.Charge).Methods("POST")
}
