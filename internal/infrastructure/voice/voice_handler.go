package voice

import (
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type VoiceHandler struct {
	bot *tgbotapi.BotAPI
}

func NewVoiceHandler(bot *tgbotapi.BotAPI) *VoiceHandler {
	return &VoiceHandler{bot: bot}
}

// DownloadVoiceFile —Å–∫–∞—á–∏–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (vh *VoiceHandler) DownloadVoiceFile(fileID string) (string, error) {
	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
	file, err := vh.bot.GetFile(tgbotapi.FileConfig{FileID: fileID})
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
	audioDir := "audio"
	if err := os.MkdirAll(audioDir, 0755); err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: %v", err)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
	fileName := fmt.Sprintf("%s_%d.oga", fileID, time.Now().Unix())
	filePath := filepath.Join(audioDir, fileName)

	// –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
	resp, err := http.Get(file.Link(vh.bot.Token))
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
	}
	defer resp.Body.Close()

	// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
	out, err := os.Create(filePath)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
	}
	defer out.Close()

	// –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
	_, err = io.Copy(out, resp.Body)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
	}

	log.Printf("–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: %s", filePath)
	return filePath, nil
}

// ProcessVoiceMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (vh *VoiceHandler) ProcessVoiceMessage(message *tgbotapi.Message) (string, error) {
	// –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
	filePath, err := vh.DownloadVoiceFile(message.Voice.FileID)
	if err != nil {
		return "", err
	}

	// TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
	// –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
	recognizedText := "üîß –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!"

	// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
	defer os.Remove(filePath)

	return recognizedText, nil
}

// CleanupOldFiles —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã
func (vh *VoiceHandler) CleanupOldFiles() error {
	audioDir := "audio"
	files, err := os.ReadDir(audioDir)
	if err != nil {
		return err
	}

	// –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
	cutoff := time.Now().Add(-time.Hour)
	for _, file := range files {
		if file.IsDir() {
			continue
		}

		filePath := filepath.Join(audioDir, file.Name())
		info, err := os.Stat(filePath)
		if err != nil {
			continue
		}

		if info.ModTime().Before(cutoff) {
			if err := os.Remove(filePath); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ %s: %v", filePath, err)
			} else {
				log.Printf("–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: %s", filePath)
			}
		}
	}

	return nil
}
