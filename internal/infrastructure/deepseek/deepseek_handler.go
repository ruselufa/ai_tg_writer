package deepseek

import (
	"ai_tg_writer/internal/monitoring"
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"strings"
	"time"
)

type DeepSeekHandler struct {
	apiKey string
	apiURL string
	client *http.Client
}

type DeepSeekMessage struct {
	Role    string `json:"role"`
	Content string `json:"content"`
}

type DeepSeekRequest struct {
	Model       string            `json:"model"`
	Messages    []DeepSeekMessage `json:"messages"`
	Temperature float64           `json:"temperature"`
	MaxTokens   int               `json:"max_tokens"`
}

type DeepSeekChoice struct {
	Message DeepSeekMessage `json:"message"`
}

type DeepSeekResponse struct {
	Choices []DeepSeekChoice `json:"choices"`
}

func NewDeepSeekHandler() *DeepSeekHandler {
	apiKey := os.Getenv("DEEPSEEK_API_KEY")
	if apiKey == "" {
		log.Println("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: DEEPSEEK_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
		return &DeepSeekHandler{
			apiKey: "",
			apiURL: "https://api.deepseek.com/v1/chat/completions",
			client: &http.Client{
				Timeout: 300 * time.Second, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 5 –º–∏–Ω—É—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤
				// –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
				Transport: &http.Transport{
					MaxIdleConns:        50,               // –ú–∞–∫—Å–∏–º—É–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
					MaxIdleConnsPerHost: 10,               // –ú–∞–∫—Å–∏–º—É–º –Ω–∞ —Ö–æ—Å—Ç
					IdleConnTimeout:     90 * time.Second, // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
					DisableCompression:  false,            // –í–∫–ª—é—á–∞–µ–º —Å–∂–∞—Ç–∏–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
					ForceAttemptHTTP2:   true,             // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP/2
					// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
					MaxConnsPerHost:       100,               // –ú–∞–∫—Å–∏–º—É–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞ —Ö–æ—Å—Ç
					ResponseHeaderTimeout: 120 * time.Second, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –æ—Ç–≤–µ—Ç–∞
					// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è TLS
					TLSHandshakeTimeout: 10 * time.Second, // –¢–∞–π–º–∞—É—Ç TLS handshake
				},
			},
		}
	}

	return &DeepSeekHandler{
		apiKey: apiKey,
		apiURL: "https://api.deepseek.com/v1/chat/completions",
		client: &http.Client{
			Timeout: 300 * time.Second, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 5 –º–∏–Ω—É—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤
			// –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
			Transport: &http.Transport{
				MaxIdleConns:        50,               // –ú–∞–∫—Å–∏–º—É–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
				MaxIdleConnsPerHost: 10,               // –ú–∞–∫—Å–∏–º—É–º –Ω–∞ —Ö–æ—Å—Ç
				IdleConnTimeout:     90 * time.Second, // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
				DisableCompression:  false,            // –í–∫–ª—é—á–∞–µ–º —Å–∂–∞—Ç–∏–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
				ForceAttemptHTTP2:   true,             // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP/2
				// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
				MaxConnsPerHost:       100,               // –ú–∞–∫—Å–∏–º—É–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞ —Ö–æ—Å—Ç
				ResponseHeaderTimeout: 120 * time.Second, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –æ—Ç–≤–µ—Ç–∞
				// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è TLS
				TLSHandshakeTimeout: 10 * time.Second, // –¢–∞–π–º–∞—É—Ç TLS handshake
			},
		},
	}
}

// RewriteText –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é DeepSeek
func (dh *DeepSeekHandler) RewriteText(originalText string) (string, error) {
	if dh.apiKey == "" {
		return "üîß –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", nil
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞ –∏–∑ prompts.json
	return dh.CreateContent("rewrite_post", originalText)
}

// ImproveText —É–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–∞
func (dh *DeepSeekHandler) ImproveText(text string, style string) (string, error) {
	if dh.apiKey == "" {
		return "üîß –§—É–Ω–∫—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", nil
	}

	var stylePrompt string
	switch style {
	case "formal":
		stylePrompt = "–ü–µ—Ä–µ–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ–º, –¥–µ–ª–æ–≤–æ–º —Å—Ç–∏–ª–µ"
	case "casual":
		stylePrompt = "–ü–µ—Ä–µ–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–º, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–º —Å—Ç–∏–ª–µ"
	case "academic":
		stylePrompt = "–ü–µ—Ä–µ–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –≤ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–º —Å—Ç–∏–ª–µ"
	default:
		stylePrompt = "–£–ª—É—á—à–∏ —Ç–µ–∫—Å—Ç, —Å–¥–µ–ª–∞–≤ –µ–≥–æ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–º –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º"
	}

	prompt := fmt.Sprintf(`%s. –°–æ—Ö—Ä–∞–Ω–∏ –æ—Å–Ω–æ–≤–Ω—É—é –º—ã—Å–ª—å, –Ω–æ —É–ª—É—á—à–∏ —Å—Ç–∏–ª—å, –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é:

"%s"

–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:`, stylePrompt, text)

	request := DeepSeekRequest{
		Model: "deepseek-chat",
		Messages: []DeepSeekMessage{
			{
				Role:    "user",
				Content: prompt,
			},
		},
		Temperature: 0.7,
		MaxTokens:   2000,
	}

	response, err := dh.makeRequest(request)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ DeepSeek API: %v", err)
	}

	if len(response.Choices) == 0 {
		return "", fmt.Errorf("–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek")
	}

	improvedText := strings.TrimSpace(response.Choices[0].Message.Content)
	return improvedText, nil
}

// SummarizeText —Å–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
func (dh *DeepSeekHandler) SummarizeText(text string) (string, error) {
	if dh.apiKey == "" {
		return "üîß –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ –∏–∑–ª–æ–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", nil
	}

	prompt := fmt.Sprintf(`–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞, –≤—ã–¥–µ–ª–∏–≤ –æ—Å–Ω–æ–≤–Ω—ã–µ –º—ã—Å–ª–∏:

"%s"

–ö—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ:`, text)

	request := DeepSeekRequest{
		Model: "deepseek-chat",
		Messages: []DeepSeekMessage{
			{
				Role:    "user",
				Content: prompt,
			},
		},
		Temperature: 0.5,
		MaxTokens:   2000,
	}

	response, err := dh.makeRequest(request)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ DeepSeek API: %v", err)
	}

	if len(response.Choices) == 0 {
		return "", fmt.Errorf("–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek")
	}

	summary := strings.TrimSpace(response.Choices[0].Message.Content)
	return summary, nil
}

// CreateContent —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–æ–≤
func (dh *DeepSeekHandler) CreateContent(contentType string, originalText string) (string, error) {
	if dh.apiKey == "" {
		return "üîß –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", nil
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã –∏–∑ JSON —Ñ–∞–π–ª–∞
	prompts, err := loadPrompts()
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤: %v", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
	promptConfig, exists := prompts[contentType]
	fmt.Printf(promptConfig.System)
	if !exists {
		return "", fmt.Errorf("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: %s", contentType)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Ç–µ–∫—Å—Ç–∞
	prompt := strings.Replace(promptConfig.User, "{text}", originalText, -1)

	request := DeepSeekRequest{
		Model: "deepseek-chat",
		Messages: []DeepSeekMessage{
			{
				Role:    "system",
				Content: promptConfig.System,
			},
			{
				Role:    "user",
				Content: prompt,
			},
		},
		Temperature: 0.8,
		MaxTokens:   2000,
	}

	response, err := dh.makeRequest(request)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ DeepSeek API: %v", err)
	}

	if len(response.Choices) == 0 {
		return "", fmt.Errorf("–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek")
	}

	content := strings.TrimSpace(response.Choices[0].Message.Content)
	return content, nil
}

// CreateTelegramPost —Å–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –ø–æ—Å—Ç –¥–ª—è Telegram —Å —Ö–µ—à—Ç–µ–≥–∞–º–∏
func (dh *DeepSeekHandler) CreateTelegramPost(originalText string) (string, error) {
	return dh.CreateContent("telegram_post", originalText)
}

// makeRequest –≤—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ DeepSeek API —Å retry –ª–æ–≥–∏–∫–æ–π
func (dh *DeepSeekHandler) makeRequest(request DeepSeekRequest) (*DeepSeekResponse, error) {
	const maxRetries = 3
	var lastErr error

	for attempt := 1; attempt <= maxRetries; attempt++ {
		log.Printf("üîÑ [DeepSeek] –ü–æ–ø—ã—Ç–∫–∞ %d/%d", attempt, maxRetries)

		response, err := dh.makeSingleRequest(request)
		if err == nil {
			if attempt > 1 {
				log.Printf("‚úÖ [DeepSeek] –£—Å–ø–µ—à–Ω–æ –ø–æ—Å–ª–µ %d –ø–æ–ø—ã—Ç–æ–∫", attempt)
			}
			return response, nil
		}

		lastErr = err
		log.Printf("‚ùå [DeepSeek] –ü–æ–ø—ã—Ç–∫–∞ %d –Ω–µ—É–¥–∞—á–Ω–∞: %v", attempt, err)

		// –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –∂–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
		if attempt < maxRetries {
			waitTime := time.Duration(attempt) * 2 * time.Second
			log.Printf("‚è≥ [DeepSeek] –ñ–¥–µ–º %v –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...", waitTime)
			time.Sleep(waitTime)
		}
	}

	return nil, fmt.Errorf("–≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –ø–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: %v", lastErr)
}

// makeSingleRequest –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω HTTP –∑–∞–ø—Ä–æ—Å –∫ DeepSeek API
func (dh *DeepSeekHandler) makeSingleRequest(request DeepSeekRequest) (*DeepSeekResponse, error) {
	jsonData, err := json.Marshal(request)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}

	req, err := http.NewRequestWithContext(context.Background(), "POST", dh.apiURL, bytes.NewBuffer(jsonData))
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}

	req.Header.Set("Authorization", "Bearer "+dh.apiKey)
	req.Header.Set("Content-Type", "application/json")

	resp, err := dh.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	if resp.StatusCode != http.StatusOK {
		monitoring.RecordError("api", "deepseek")
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ API: %s - %s", resp.Status, string(body))
	}

	var response DeepSeekResponse
	if err := json.Unmarshal(body, &response); err != nil {
		monitoring.RecordError("api", "deepseek")
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
	// –í —Ä–µ–∞–ª—å–Ω–æ–º API –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª—è usage.prompt_tokens –∏ usage.completion_tokens
	inputTokens := len(strings.Split(request.Messages[0].Content, " "))
	outputTokens := len(strings.Split(response.Choices[0].Message.Content, " "))

	monitoring.RecordDeepSeekTokens("input", inputTokens)
	monitoring.RecordDeepSeekTokens("output", outputTokens)
	monitoring.RecordDeepSeekTokens("total", inputTokens+outputTokens)

	return &response, nil
}

// PromptConfig –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
type PromptConfig struct {
	System string `json:"system"`
	User   string `json:"user"`
	Edit   struct {
		System string `json:"system"`
		User   string `json:"user"`
	} `json:"edit"`
}

// loadPrompts –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–º–ø—Ç—ã –∏–∑ JSON —Ñ–∞–π–ª–∞
func loadPrompts() (map[string]PromptConfig, error) {
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø—Ä–æ–º–ø—Ç–æ–≤
	promptsPath := "internal/infrastructure/prompts/prompts.json"

	// –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
	data, err := os.ReadFile(promptsPath)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–æ–º–ø—Ç–æ–≤: %v", err)
	}

	// –ü–∞—Ä—Å–∏–º JSON
	var prompts map[string]PromptConfig
	if err := json.Unmarshal(data, &prompts); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –ø—Ä–æ–º–ø—Ç–æ–≤: %v", err)
	}

	return prompts, nil
}
