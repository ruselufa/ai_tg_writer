package deepseek

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"strings"
	"time"
)

type DeepSeekHandler struct {
	apiKey string
	apiURL string
	client *http.Client
}

type DeepSeekMessage struct {
	Role    string `json:"role"`
	Content string `json:"content"`
}

type DeepSeekRequest struct {
	Model       string            `json:"model"`
	Messages    []DeepSeekMessage `json:"messages"`
	Temperature float64           `json:"temperature"`
	MaxTokens   int               `json:"max_tokens"`
}

type DeepSeekChoice struct {
	Message DeepSeekMessage `json:"message"`
}

type DeepSeekResponse struct {
	Choices []DeepSeekChoice `json:"choices"`
}

func NewDeepSeekHandler() *DeepSeekHandler {
	apiKey := os.Getenv("DEEPSEEK_API_KEY")
	if apiKey == "" {
		log.Println("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: DEEPSEEK_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
		return &DeepSeekHandler{
			apiKey: "",
			apiURL: "https://api.deepseek.com/v1/chat/completions",
			client: &http.Client{
				Timeout: 60 * time.Second,
				// –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
				Transport: &http.Transport{
					MaxIdleConns:        50,               // –ú–∞–∫—Å–∏–º—É–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
					MaxIdleConnsPerHost: 10,               // –ú–∞–∫—Å–∏–º—É–º –Ω–∞ —Ö–æ—Å—Ç
					IdleConnTimeout:     90 * time.Second, // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
					DisableCompression:  false,            // –í–∫–ª—é—á–∞–µ–º —Å–∂–∞—Ç–∏–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
					ForceAttemptHTTP2:   true,             // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP/2
					// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
					MaxConnsPerHost:       100,              // –ú–∞–∫—Å–∏–º—É–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞ —Ö–æ—Å—Ç
					ResponseHeaderTimeout: 30 * time.Second, // –¢–∞–π–º–∞—É—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –æ—Ç–≤–µ—Ç–∞
					// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è TLS
					TLSHandshakeTimeout: 10 * time.Second, // –¢–∞–π–º–∞—É—Ç TLS handshake
				},
			},
		}
	}

	return &DeepSeekHandler{
		apiKey: apiKey,
		apiURL: "https://api.deepseek.com/v1/chat/completions",
		client: &http.Client{
			Timeout: 60 * time.Second,
			// –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
			Transport: &http.Transport{
				MaxIdleConns:        50,               // –ú–∞–∫—Å–∏–º—É–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
				MaxIdleConnsPerHost: 10,               // –ú–∞–∫—Å–∏–º—É–º –Ω–∞ —Ö–æ—Å—Ç
				IdleConnTimeout:     90 * time.Second, // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
				DisableCompression:  false,            // –í–∫–ª—é—á–∞–µ–º —Å–∂–∞—Ç–∏–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
				ForceAttemptHTTP2:   true,             // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP/2
				// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
				MaxConnsPerHost:       100,              // –ú–∞–∫—Å–∏–º—É–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞ —Ö–æ—Å—Ç
				ResponseHeaderTimeout: 30 * time.Second, // –¢–∞–π–º–∞—É—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –æ—Ç–≤–µ—Ç–∞
				// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è TLS
				TLSHandshakeTimeout: 10 * time.Second, // –¢–∞–π–º–∞—É—Ç TLS handshake
			},
		},
	}
}

// RewriteText –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é DeepSeek
func (dh *DeepSeekHandler) RewriteText(originalText string) (string, error) {
	if dh.apiKey == "" {
		return "üîß –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", nil
	}

	prompt := fmt.Sprintf(`–°–¥–µ–ª–∞–π –∏–∑ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫—Ä–∞—Å–∏–≤—ã–π –ø–æ—Å—Ç –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MarkdownV2:
- –ò—Å–ø–æ–ª—å–∑—É–π *–∂–∏—Ä–Ω—ã–π* –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –≤–∞–∂–Ω—ã—Ö –º—ã—Å–ª–µ–π.
- –ò—Å–ø–æ–ª—å–∑—É–π _–∫—É—Ä—Å–∏–≤_ –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–æ–≤.
- –î–ª—è —Å–ø–∏—Å–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, üîπ, ‚úîÔ∏è, ‚ñ´Ô∏è).
- –ú–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏ –∏ –ø—É–Ω–∫—Ç–∞–º–∏ –¥–µ–ª–∞–π –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É.
- –≠–∫—Ä–∞–Ω–∏—Ä—É–π –≤—Å–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã MarkdownV2: _ * [ ] ( ) ~ > # + - = | { } . !
- –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å 3-5 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ö–µ—à—Ç–µ–≥–æ–≤.

–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:
\"%s\"

–°–¥–µ–ª–∞–π –∫—Ä–∞—Å–∏–≤—ã–π Telegram-–ø–æ—Å—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π:`, originalText)

	request := DeepSeekRequest{
		Model: "deepseek-chat",
		Messages: []DeepSeekMessage{
			{
				Role:    "user",
				Content: prompt,
			},
		},
		Temperature: 0.7,
		MaxTokens:   1000,
	}

	response, err := dh.makeRequest(request)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ DeepSeek API: %v", err)
	}

	if len(response.Choices) == 0 {
		return "", fmt.Errorf("–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek")
	}

	rewrittenText := strings.TrimSpace(response.Choices[0].Message.Content)
	return rewrittenText, nil
}

// ImproveText —É–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–∞
func (dh *DeepSeekHandler) ImproveText(text string, style string) (string, error) {
	if dh.apiKey == "" {
		return "üîß –§—É–Ω–∫—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", nil
	}

	var stylePrompt string
	switch style {
	case "formal":
		stylePrompt = "–ü–µ—Ä–µ–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ–º, –¥–µ–ª–æ–≤–æ–º —Å—Ç–∏–ª–µ"
	case "casual":
		stylePrompt = "–ü–µ—Ä–µ–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–º, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–º —Å—Ç–∏–ª–µ"
	case "academic":
		stylePrompt = "–ü–µ—Ä–µ–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –≤ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–º —Å—Ç–∏–ª–µ"
	default:
		stylePrompt = "–£–ª—É—á—à–∏ —Ç–µ–∫—Å—Ç, —Å–¥–µ–ª–∞–≤ –µ–≥–æ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–º –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º"
	}

	prompt := fmt.Sprintf(`%s. –°–æ—Ö—Ä–∞–Ω–∏ –æ—Å–Ω–æ–≤–Ω—É—é –º—ã—Å–ª—å, –Ω–æ —É–ª—É—á—à–∏ —Å—Ç–∏–ª—å, –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é:

"%s"

–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:`, stylePrompt, text)

	request := DeepSeekRequest{
		Model: "deepseek-chat",
		Messages: []DeepSeekMessage{
			{
				Role:    "user",
				Content: prompt,
			},
		},
		Temperature: 0.7,
		MaxTokens:   1000,
	}

	response, err := dh.makeRequest(request)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ DeepSeek API: %v", err)
	}

	if len(response.Choices) == 0 {
		return "", fmt.Errorf("–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek")
	}

	improvedText := strings.TrimSpace(response.Choices[0].Message.Content)
	return improvedText, nil
}

// SummarizeText —Å–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
func (dh *DeepSeekHandler) SummarizeText(text string) (string, error) {
	if dh.apiKey == "" {
		return "üîß –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ –∏–∑–ª–æ–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", nil
	}

	prompt := fmt.Sprintf(`–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞, –≤—ã–¥–µ–ª–∏–≤ –æ—Å–Ω–æ–≤–Ω—ã–µ –º—ã—Å–ª–∏:

"%s"

–ö—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ:`, text)

	request := DeepSeekRequest{
		Model: "deepseek-chat",
		Messages: []DeepSeekMessage{
			{
				Role:    "user",
				Content: prompt,
			},
		},
		Temperature: 0.5,
		MaxTokens:   500,
	}

	response, err := dh.makeRequest(request)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ DeepSeek API: %v", err)
	}

	if len(response.Choices) == 0 {
		return "", fmt.Errorf("–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek")
	}

	summary := strings.TrimSpace(response.Choices[0].Message.Content)
	return summary, nil
}

// CreateTelegramPost —Å–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –ø–æ—Å—Ç –¥–ª—è Telegram —Å —Ö–µ—à—Ç–µ–≥–∞–º–∏
func (dh *DeepSeekHandler) CreateTelegramPost(originalText string) (string, error) {
	if dh.apiKey == "" {
		return "üîß –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", nil
	}

	prompt := fmt.Sprintf(`–°–æ–∑–¥–∞–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è Telegram –∫–∞–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞. 

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é:
- –ò—Å–ø–æ–ª—å–∑—É–π *–∂–∏—Ä–Ω—ã–π* –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –≤–∞–∂–Ω—ã—Ö –º—ã—Å–ª–µ–π.
- –ò—Å–ø–æ–ª—å–∑—É–π _–∫—É—Ä—Å–∏–≤_ –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–æ–≤.
- –î–ª—è —Å–ø–∏—Å–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, üîπ, ‚úîÔ∏è, ‚ñ´Ô∏è).
- –ú–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏ –∏ –ø—É–Ω–∫—Ç–∞–º–∏ –¥–µ–ª–∞–π –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É.
- –≠–∫—Ä–∞–Ω–∏—Ä—É–π –≤—Å–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã MarkdownV2: _ * [ ] ( ) ~ > # + - = | { } . !
- –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å 3-5 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ö–µ—à—Ç–µ–≥–æ–≤.

–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:
"%s"

–°–æ–∑–¥–∞–π –∫—Ä–∞—Å–∏–≤—ã–π Telegram –ø–æ—Å—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π:`, originalText)

	request := DeepSeekRequest{
		Model: "deepseek-chat",
		Messages: []DeepSeekMessage{
			{
				Role:    "user",
				Content: prompt,
			},
		},
		Temperature: 0.8,
		MaxTokens:   1500,
	}

	response, err := dh.makeRequest(request)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ DeepSeek API: %v", err)
	}

	if len(response.Choices) == 0 {
		return "", fmt.Errorf("–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek")
	}

	post := strings.TrimSpace(response.Choices[0].Message.Content)
	return post, nil
}

// makeRequest –≤—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ DeepSeek API
func (dh *DeepSeekHandler) makeRequest(request DeepSeekRequest) (*DeepSeekResponse, error) {
	jsonData, err := json.Marshal(request)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}

	req, err := http.NewRequestWithContext(context.Background(), "POST", dh.apiURL, bytes.NewBuffer(jsonData))
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}

	req.Header.Set("Authorization", "Bearer "+dh.apiKey)
	req.Header.Set("Content-Type", "application/json")

	resp, err := dh.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ API: %s - %s", resp.Status, string(body))
	}

	var response DeepSeekResponse
	if err := json.Unmarshal(body, &response); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	return &response, nil
}
