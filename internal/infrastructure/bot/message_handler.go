package bot

import (
	"ai_tg_writer/internal/infrastructure/voice"
	"fmt"
	"log"
	"regexp"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// MessageHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
type MessageHandler struct {
	stateManager  *StateManager
	voiceHandler  *voice.VoiceHandler
	inlineHandler *InlineHandler
}

// NewMessageHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
func NewMessageHandler(stateManager *StateManager, voiceHandler *voice.VoiceHandler, inlineHandler *InlineHandler) *MessageHandler {
	return &MessageHandler{
		stateManager:  stateManager,
		voiceHandler:  voiceHandler,
		inlineHandler: inlineHandler,
	}
}

// HandleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
func (mh *MessageHandler) HandleMessage(bot *Bot, message *tgbotapi.Message) bool {
	userID := message.From.ID
	state := mh.stateManager.GetState(userID)

	if state.WaitingForEmail && message.Text != "" {
		email := strings.TrimSpace(message.Text)
		if mh.isValidEmail(email) {
			// save email
			err := bot.DB.UpdateUserEmail(userID, email)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è email: %v", err)
				bot.Send(tgbotapi.NewMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
				return true
			}
			state.WaitingForEmail = false
			log.Printf("Email —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %s", userID, email)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ email
			successMsg := tgbotapi.NewMessage(message.Chat.ID, "‚úÖ E-mail —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –ø–æ–¥–ø–∏—Å–∫–∏...")
			bot.Send(successMsg)

			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
			mh.stateManager.UpdateStep(userID, "idle")
			mh.showSubscriptionPurchaseScreen(bot, message.Chat.ID, userID)
			return true // —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
		}
		bot.Send(tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç e-mail. –ü—Ä–∏–º–µ—Ä: user@example.com\n\n–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –æ—Ç–º–µ–Ω—ã."))
		return true // —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞
	if state.WaitingForPostText && message.Text != "" {
		mh.handlePostTextForRewrite(bot, message)
		return true // —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if !state.WaitingForVoice {
		return false // —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ —Å —É—á–µ—Ç–æ–º grace period
	subscriptionStatus, canCreate, remainingFree, err := mh.inlineHandler.checkUserSubscriptionStatus(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏–º–∏—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		bot.Send(msg)
		return true
	}
	if !canCreate {
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ñ–æ—Ä–º–∏—Ç—å
		keyboard := mh.inlineHandler.createSubscriptionKeyboard(userID, subscriptionStatus, remainingFree)

		var messageText string
		switch subscriptionStatus {
		case "cancelled":
			// –ï—Å–ª–∏ canCreate = false, –∑–Ω–∞—á–∏—Ç grace period –∏—Å—Ç–µ–∫
			messageText = "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
		case "expired":
			messageText = "‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫.\n\n"
		case "no_subscription":
			messageText = "üíé –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
		default:
			messageText = "üíé –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞.\n\n"
		}

		if remainingFree > 0 {
			messageText += fmt.Sprintf("üéÅ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å %d –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∏–π –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.\n\n", remainingFree)
		} else {
			messageText += "üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.\n\n"
		}

		messageText += "üí≥ –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞!"

		msg := tgbotapi.NewMessage(message.Chat.ID, messageText)
		msg.ReplyMarkup = &keyboard
		bot.Send(msg)
		return true
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if message.Voice != nil {
		mh.handleVoiceMessage(bot, message)
	}
	return true
}

// handleVoiceMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (mh *MessageHandler) handleVoiceMessage(bot *Bot, message *tgbotapi.Message) {
	userID := message.From.ID
	// –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	state := mh.stateManager.GetState(userID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ —Å —É—á–µ—Ç–æ–º grace period
	subscriptionStatus, canCreate, remainingFree, err := mh.inlineHandler.checkUserSubscriptionStatus(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏–º–∏—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		bot.Send(msg)
		return
	}
	if !canCreate {
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ñ–æ—Ä–º–∏—Ç—å
		keyboard := mh.inlineHandler.createSubscriptionKeyboard(userID, subscriptionStatus, remainingFree)

		var messageText string
		switch subscriptionStatus {
		case "cancelled":
			// –ï—Å–ª–∏ canCreate = false, –∑–Ω–∞—á–∏—Ç grace period –∏—Å—Ç–µ–∫
			messageText = "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
		case "expired":
			messageText = "‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫.\n\n"
		case "no_subscription":
			messageText = "üíé –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
		default:
			messageText = "üíé –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞.\n\n"
		}

		if remainingFree > 0 {
			messageText += fmt.Sprintf("üéÅ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å %d –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∏–π –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.\n\n", remainingFree)
		} else {
			messageText += "üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.\n\n"
		}

		messageText += "üí≥ –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞!"

		msg := tgbotapi.NewMessage(message.Chat.ID, messageText)
		msg.ReplyMarkup = &keyboard
		bot.Send(msg)
		mh.showSubscriptionPurchaseScreen(bot, message.Chat.ID, userID)
		return
	}

	log.Printf("[DEBUG] handleVoiceMessage –≤—ã–∑–≤–∞–Ω, WaitingForVoice=%v, ApprovalStatus=%s", state.WaitingForVoice, state.ApprovalStatus)

	// –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
	filePath, err := mh.voiceHandler.DownloadVoiceFile(message.Voice.FileID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
		msg.ReplyToMessageID = message.MessageID
		bot.Send(msg)
		return
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫–æ–º —Ä–µ–∂–∏–º–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è
	if state.ApprovalStatus == "editing" {
		// –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –¥–æ–±–∞–≤–ª—è–µ–º –≤ PendingEdits
		if state.PendingEdits == nil {
			state.PendingEdits = make(map[string]*VoiceTranscription)
		}

		mh.stateManager.AddPendingEdit(userID, message.MessageID, message.Voice.FileID, message.Voice.Duration, message.Voice.FileSize)

		// –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏ —Å—Ç–∞—Ç—É—Å
		if voice, ok := state.PendingEdits[message.Voice.FileID]; ok {
			voice.FilePath = filePath
			voice.Status = "pending"
			voice.Text = ""
		}

		log.Printf("[DEBUG] PendingEdits –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: %+v", state.PendingEdits)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚úÖ –ü—Ä–∞–≤–∫–∏ –ø—Ä–∏–Ω—è—Ç—ã. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è?")
		keyboard := bot.CreateEditContinueKeyboard()
		msg.ReplyMarkup = keyboard
		bot.Send(msg)
	} else {
		// –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –¥–æ–±–∞–≤–ª—è–µ–º –≤ PendingVoices
		if state.PendingVoices == nil {
			state.PendingVoices = make(map[string]*VoiceTranscription)
		}

		// –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
		mh.stateManager.AddPendingVoice(userID, message.MessageID, message.Voice.FileID, message.Voice.Duration, message.Voice.FileSize)

		// –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏ —Å—Ç–∞—Ç—É—Å
		if voice, ok := state.PendingVoices[message.Voice.FileID]; ok {
			voice.FilePath = filePath
			voice.Status = "pending"
			voice.Text = ""
		}

		// –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ PendingVoices
		log.Printf("[DEBUG] PendingVoices –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: %+v", state.PendingVoices)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∫—Ç–æ–≤–∫—É –∏–ª–∏ —É–∂–µ –Ω–∞—á–∏–Ω–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞?")
		keyboard := bot.CreateContinueKeyboard()
		msg.ReplyMarkup = keyboard
		bot.Send(msg)
	}
}

// isValidEmail –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å email –∞–¥—Ä–µ—Å–∞
func (mh *MessageHandler) isValidEmail(email string) bool {
	// –ü—Ä–æ—Å—Ç–∞—è, –Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Ä–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è email
	emailRegex := regexp.MustCompile(`^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$`)
	return emailRegex.MatchString(email)
}

// handlePostTextForRewrite –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞
func (mh *MessageHandler) handlePostTextForRewrite(bot *Bot, message *tgbotapi.Message) {
	userID := message.From.ID

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
	postText := strings.TrimSpace(message.Text)
	if postText == "" {
		bot.Send(tgbotapi.NewMessage(message.Chat.ID, "‚ùå –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."))
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
	mh.stateManager.SetRewritingPost(userID, postText)
	mh.stateManager.SetWaitingForPostText(userID, false)

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
	keyboard := bot.CreateRewriteActionKeyboard()
	msg := tgbotapi.NewMessage(message.Chat.ID, "‚úÖ –ü–æ—Å—Ç –ø—Ä–∏–Ω—è—Ç! –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å:")
	msg.ReplyMarkup = &keyboard
	bot.Send(msg)
}

// showSubscriptionPurchaseScreen –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
func (mh *MessageHandler) showSubscriptionPurchaseScreen(bot *Bot, chatID int64, userID int64) {
	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ (—Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ + 1 –º–µ—Å—è—Ü)
	subscriptionEndDate := time.Now().AddDate(0, 1, 0)
	formattedDate := subscriptionEndDate.Format("02.01.2006")

	text := "üíé *–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ Premium –ø–æ–¥–ø–∏—Å–∫–∏*\n\n" +
		"‚ú® *–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Premium:*\n" +
		"‚Ä¢ üöÄ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤\n" +
		"‚Ä¢ ‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤\n" +
		"‚Ä¢ üé® –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏\n" +
		"‚Ä¢ üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n" +
		"‚Ä¢ üîß –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —à–∞–±–ª–æ–Ω—ã\n" +
		"‚Ä¢ üí¨ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n" +
		"üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* 990‚ÇΩ/–º–µ—Å—è—Ü\n" +
		"üìÖ *–ü–µ—Ä–∏–æ–¥:* 1 –º–µ—Å—è—Ü (–¥–æ " + formattedDate + ")\n" +
		"‚ôªÔ∏è *–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ:* –≤–∫–ª—é—á–µ–Ω–æ\n\n" +
		"üìã *–û—Ñ–µ—Ä—Ç–∞:* [–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ](#)\n\n" +
		"–ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É¬ª –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É", "confirm_purchase"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "subscription"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = &keyboard
	bot.Send(msg)
}
