package bot

import (
	"ai_tg_writer/internal/service"
	"fmt"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type SubscriptionHandler struct {
	subscriptionService *service.SubscriptionService
}

func NewSubscriptionHandler(subscriptionService *service.SubscriptionService) *SubscriptionHandler {
	return &SubscriptionHandler{
		subscriptionService: subscriptionService,
	}
}

// HandleSubscriptionCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /subscription
func (h *SubscriptionHandler) HandleSubscriptionCommand(bot *Bot, message *tgbotapi.Message) {
	userID := message.From.ID

	// –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã
	tariffs := h.subscriptionService.GetAvailableTariffs()

	if len(tariffs) == 0 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –¢–∞—Ä–∏—Ñ—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
		bot.Send(msg)
		return
	}

	tariff := tariffs[0] // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ç–∞—Ä–∏—Ñ

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	subscription, err := h.subscriptionService.GetUserSubscription(userID)
	if err != nil {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ")
		bot.Send(msg)
		return
	}

	var messageText string

	if subscription != nil && subscription.Active {
		// –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
		messageText = fmt.Sprintf(
			"üéâ *–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ %s*\n\n"+
				"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: %.0f‚ÇΩ/–º–µ—Å—è—Ü\n"+
				"üìÖ –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂: %s\n"+
				"‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞\n\n"+
				"–•–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?",
			tariff.Name,
			tariff.Price,
			subscription.NextPayment.Format("02.01.2006"),
		)

		// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "cancel_subscription"),
			),
		)

		msg := tgbotapi.NewMessage(message.Chat.ID, messageText)
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = keyboard
		bot.Send(msg)

	} else {
		// –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
		messageText = fmt.Sprintf(
			"üíé *–ü–æ–¥–ø–∏—Å–∫–∞ %s*\n\n"+
				"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: %.0f‚ÇΩ/–º–µ—Å—è—Ü\n"+
				"üìù –û–ø–∏—Å–∞–Ω–∏–µ: %s\n\n"+
				"‚ú® –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n",
			tariff.Name,
			tariff.Price,
			tariff.Description,
		)

		for _, feature := range tariff.Features {
			messageText += fmt.Sprintf("‚Ä¢ %s\n", feature)
		}

		messageText += "\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:"

		// –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
		paymentURL, err := h.subscriptionService.CreateSubscriptionLink(userID, tariff.ID, tariff.Price)
		if err != nil {
			msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É")
			bot.Send(msg)
			return
		}

		// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonURL("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", paymentURL),
			),
		)

		msg := tgbotapi.NewMessage(message.Chat.ID, messageText)
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = keyboard
		bot.Send(msg)
	}
}

// HandleSubscriptionCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –æ—Ç –∫–Ω–æ–ø–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
func (h *SubscriptionHandler) HandleSubscriptionCallback(bot *Bot, callback *tgbotapi.CallbackQuery) {
	switch callback.Data {
	case "cancel_subscription":
		h.handleCancelSubscription(bot, callback)
	case "confirm_cancel_subscription":
		h.handleConfirmCancelSubscription(bot, callback)
	default:
		// –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
		return
	}
}

// handleCancelSubscription –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏
func (h *SubscriptionHandler) handleCancelSubscription(bot *Bot, callback *tgbotapi.CallbackQuery) {
	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", "confirm_cancel_subscription"),
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å", "subscription"),
		),
	)

	msg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		"‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏*\n\n"+
			"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?\n"+
			"–ü–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è–º.",
	)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = &keyboard

	bot.Send(msg)
}

// handleConfirmCancelSubscription –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ—Ç–º–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏
func (h *SubscriptionHandler) handleConfirmCancelSubscription(bot *Bot, callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID

	// –û—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
	err := h.subscriptionService.CancelSubscription(userID)
	if err != nil {
		msg := tgbotapi.NewEditMessageText(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
		)
		bot.Send(msg)
		return
	}

	// –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	msg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		"‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞*\n\n"+
			"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"+
			"–î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞–Ω–æ–≤–æ.",
	)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = &tgbotapi.InlineKeyboardMarkup{}

	bot.Send(msg)
}

// CheckSubscriptionStatus –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *SubscriptionHandler) CheckSubscriptionStatus(userID int64) (bool, error) {
	return h.subscriptionService.IsUserSubscribed(userID)
}
