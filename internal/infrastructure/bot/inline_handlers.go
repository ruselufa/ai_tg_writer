package bot

import (
	"ai_tg_writer/internal/infrastructure/voice"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
	"sync"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// InlineHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç inline-–∫–æ–º–∞–Ω–¥—ã
type InlineHandler struct {
	stateManager *StateManager
	voiceHandler *voice.VoiceHandler
	prompts      map[string]Prompt
}

// NewInlineHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–æ–º–∞–Ω–¥
func NewInlineHandler(stateManager *StateManager, voiceHandler *voice.VoiceHandler) *InlineHandler {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã
	promptsFile, err := os.ReadFile("internal/infrastructure/prompts/prompts.json")
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–æ–º–ø—Ç–æ–≤: %v", err)
		promptsFile = []byte("{}")
	}

	var prompts map[string]Prompt
	if err := json.Unmarshal(promptsFile, &prompts); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –ø—Ä–æ–º–ø—Ç–æ–≤: %v", err)
		prompts = make(map[string]Prompt)
	}

	return &InlineHandler{
		stateManager: stateManager,
		voiceHandler: voiceHandler,
		prompts:      prompts,
	}
}

// HandleCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
func (ih *InlineHandler) HandleCallback(bot *Bot, callback *tgbotapi.CallbackQuery) {
	log.Printf("Callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %s", callback.From.ID, callback.Data)

	switch callback.Data {
	case "create_post":
		ih.handleCreatePost(bot, callback)
	case "create_telegram_post":
		ih.handleCreateScript(bot, callback, "telegram_post")
	case "create_script_youtube":
		ih.handleCreateScript(bot, callback, "youtube_script")
	case "create_script_reels":
		ih.handleCreateScript(bot, callback, "reels_script")
	case "create_post_instagram":
		ih.handleCreateScript(bot, callback, "instagram_post")
	case "continue_dictation":
		ih.handleContinueDictation(bot, callback)
	case "start_creation":
		ih.handleStartCreation(bot, callback)
	case "edit_start_creation":
		ih.handleEditStartCreation(bot, callback)
	case "approve":
		ih.handleApprove(bot, callback)
	case "edit_post":
		ih.handleEditPost(bot, callback)
	case "save_post":
		ih.handleSavePost(bot, callback)
	case "main_menu":
		ih.handleMainMenu(bot, callback)
	case "help":
		ih.handleHelp(bot, callback)
	case "profile":
		ih.handleProfile(bot, callback)
	case "subscription":
		ih.handleSubscription(bot, callback)
	case "no_action":
		// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –ø—Ä–æ–±–µ–ª-–∑–∞–≥–ª—É—à–∫—É
		return
	default:
		ih.handleUnknownCallback(bot, callback)
	}
}

// handleCreatePost –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
func (ih *InlineHandler) handleCreatePost(bot *Bot, callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	ih.stateManager.UpdateStep(userID, "selecting_content_type")
	ih.stateManager.SetContentType(userID, "telegram_post")
	ih.stateManager.ClearVoiceMessages(userID)
	ih.stateManager.SetCurrentPost(userID, nil)

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
	keyboard := bot.CreateContentTypeKeyboard()

	msg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		"‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:",
	)
	msg.ReplyMarkup = &keyboard

	bot.Send(msg)
}

// handleCreateScript –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–∫—Ä–∏–ø—Ç–∞
func (ih *InlineHandler) handleCreateScript(bot *Bot, callback *tgbotapi.CallbackQuery, contentType string) {
	userID := callback.From.ID

	log.Printf("[DEBUG] handleCreateScript –≤—ã–∑–≤–∞–Ω –¥–ª—è userID=%d, contentType=%s", userID, contentType)

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	ih.stateManager.UpdateStep(userID, "waiting_for_voice")
	ih.stateManager.SetContentType(userID, contentType)
	ih.stateManager.SetWaitingForVoice(userID, true)
	ih.stateManager.ClearVoiceMessages(userID)

	// –Ø–≤–Ω–æ –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ
	state := ih.stateManager.GetState(userID)
	state.WaitingForVoice = true

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
	var contentName string
	switch contentType {
	case "youtube_script":
		contentName = "—Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –≤–∏–¥–µ–æ –Ω–∞ YouTube"
	case "reels_script":
		contentName = "—Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è Reels –≤ Instagram"
	case "instagram_post":
		contentName = "–ø–æ—Å—Ç –≤ Instagram"
	case "telegram_post":
		contentName = "–ø–æ—Å—Ç –≤ Telegram"
	default:
		contentName = "–∫–æ–Ω—Ç–µ–Ω—Ç"
	}

	msg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		"üé§ –ù–∞ –∫–∞–∫—É—é —Ç–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å "+contentName+"?\n\n"+
			"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º–∏ –∏–¥–µ—è–º–∏:",
	)

	bot.Send(msg)
}

// handleStartCreation –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
func (ih *InlineHandler) handleStartCreation(bot *Bot, callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID
	state := ih.stateManager.GetState(userID)

	// –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ PendingVoices
	log.Printf("[DEBUG] PendingVoices –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è: %+v", state.PendingVoices)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
	if state.PendingVoices == nil || len(state.PendingVoices) == 0 {
		msg := tgbotapi.NewEditMessageText(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			"‚ùå –ù–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
		)
		bot.Send(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –µ—Å—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
	hasInvalidFiles := false
	for _, voice := range state.PendingVoices {
		if voice.FilePath == "" {
			hasInvalidFiles = true
			break
		}
	}

	if hasInvalidFiles {
		msg := tgbotapi.NewEditMessageText(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			"‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö —Å–Ω–æ–≤–∞.",
		)
		bot.Send(msg)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
	msg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		"‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...",
	)
	bot.Send(msg)

	// –°–æ–∑–¥–∞–µ–º WaitGroup –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	var wg sync.WaitGroup
	results := make([]string, 0)
	resultsMutex := &sync.Mutex{}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
	for fileID, voice := range state.PendingVoices {
		wg.Add(1)
		go func(fileID string, voice *VoiceTranscription) {
			defer wg.Done()

			// –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º —Ñ–∞–π–ª
			text, err := ih.voiceHandler.TranscribeVoiceFile(voice.FilePath)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
				ih.stateManager.UpdateVoiceTranscription(userID, fileID, "", err)
				return
			}

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
			resultsMutex.Lock()
			results = append(results, text)
			resultsMutex.Unlock()

			ih.stateManager.UpdateVoiceTranscription(userID, fileID, text, nil)

			// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
			if err := os.Remove(voice.FilePath); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ %s: %v", voice.FilePath, err)
			}
		}(fileID, voice)
	}

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	wg.Wait()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	if len(results) == 0 {
		msg := tgbotapi.NewMessage(
			callback.Message.Chat.ID,
			"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
		)
		bot.Send(msg)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∏–¥–µ–π
	var fragments []string
	for i, result := range results {
		fragments = append(fragments, fmt.Sprintf("–§—Ä–∞–≥–º–µ–Ω—Ç –∏–¥–µ–π %d: %s", i+1, result))
	}
	allMessages := strings.Join(fragments, "\n\n")

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç —á–µ—Ä–µ–∑ VoiceHandler
	postText, err := ih.voiceHandler.GenerateTelegramPost(allMessages)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: %v", err)
		msg := tgbotapi.NewMessage(
			callback.Message.Chat.ID,
			"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
		)
		bot.Send(msg)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
	ih.stateManager.SetLastGeneratedText(userID, postText)

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç
	post := Post{
		ContentType: state.ContentType,
		Content:     postText,
		Messages:    results,
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç
	ih.stateManager.SetCurrentPost(userID, &post)
	ih.stateManager.SetApprovalStatus(userID, "pending")

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è
	keyboard := bot.CreateApprovalKeyboard()
	resultMsg := tgbotapi.NewMessage(
		callback.Message.Chat.ID,
		postText,
	)
	resultMsg.ReplyMarkup = keyboard
	bot.Send(resultMsg)
}

// handleAddMore –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ—â–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
func (ih *InlineHandler) handleAddMore(bot *Bot, callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	ih.stateManager.UpdateStep(userID, "waiting_for_voice")
	ih.stateManager.SetWaitingForVoice(userID, true)

	msg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		"üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
	)

	bot.Send(msg)
}

// handleEditPost –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
func (ih *InlineHandler) handleEditPost(bot *Bot, callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID
	state := ih.stateManager.GetState(userID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	if state.CurrentPost == nil {
		msg := tgbotapi.NewEditMessageText(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			"‚ùå –ù–µ—Ç –ø–æ—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
		)
		bot.Send(msg)
		return
	}

	// –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–∞–≤–∫–∏ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	ih.stateManager.ClearEditMessages(userID)
	ih.stateManager.ClearPendingEdits(userID)
	ih.stateManager.UpdateStep(userID, "editing")
	ih.stateManager.SetWaitingForVoice(userID, true)
	ih.stateManager.SetApprovalStatus(userID, "editing")

	msg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		"üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –¥–ª—è –ø–æ—Å—Ç–∞:\n\n"+
			"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n"+state.CurrentPost.Content,
	)

	bot.Send(msg)
}

// handleMainMenu –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
func (ih *InlineHandler) handleMainMenu(bot *Bot, callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Å—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
	state := ih.stateManager.GetState(userID)
	if state.CurrentPost != nil {
		ih.stateManager.SavePost(userID, *state.CurrentPost)
		log.Printf("–ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î (–∑–∞–≥–ª—É—à–∫–∞) –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –≤ –º–µ–Ω—é: %s", state.CurrentPost.ContentType)
	}

	// –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	ih.stateManager.UpdateStep(userID, "idle")
	ih.stateManager.SetCurrentPost(userID, nil)
	ih.stateManager.ClearVoiceMessages(userID)
	ih.stateManager.ClearPendingVoices(userID)
	ih.stateManager.ClearEditMessages(userID)
	ih.stateManager.ClearPendingEdits(userID)
	ih.stateManager.SetApprovalStatus(userID, "idle")
	ih.stateManager.SetWaitingForVoice(userID, false)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	text := "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å –º–æ—â–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ —Ç–≤–æ–∏—Ö –∏–¥–µ–π. –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å:"
	keyboard := bot.CreateMainKeyboard()

	msg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
	)
	msg.ReplyMarkup = &keyboard

	bot.Send(msg)
}

// handleContinueDictation –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∫—Ç–æ–≤–∫–∏
func (ih *InlineHandler) handleContinueDictation(bot *Bot, callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID
	state := ih.stateManager.GetState(userID)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	state.WaitingForVoice = true
	ih.stateManager.SetWaitingForVoice(userID, true)

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
	var messageText string
	if state.ApprovalStatus == "editing" {
		messageText = "üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∫–∞–º–∏. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è\"."
	} else {
		messageText = "üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ\"."
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	msg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		messageText,
	)

	var keyboard tgbotapi.InlineKeyboardMarkup
	if state.ApprovalStatus == "editing" {
		keyboard = bot.CreateEditContinueKeyboard()
	} else {
		keyboard = bot.CreateContinueKeyboard()
	}

	msg.ReplyMarkup = &keyboard
	bot.Send(msg)
}

// handleSavePost –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
func (ih *InlineHandler) handleSavePost(bot *Bot, callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID
	state := ih.stateManager.GetState(userID)

	if state.CurrentPost == nil {
		msg := tgbotapi.NewEditMessageText(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			"‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
		)
		bot.Send(msg)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –≤ –ë–î (–∑–∞–≥–ª—É—à–∫–∞)
	ih.stateManager.SavePost(userID, *state.CurrentPost)
	log.Printf("–ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î (–∑–∞–≥–ª—É—à–∫–∞): %s", state.CurrentPost.ContentType)

	// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	ih.stateManager.UpdateStep(userID, "idle")
	ih.stateManager.SetCurrentPost(userID, nil)
	ih.stateManager.ClearVoiceMessages(userID)
	ih.stateManager.ClearPendingVoices(userID)
	ih.stateManager.ClearEditMessages(userID)
	ih.stateManager.ClearPendingEdits(userID)
	ih.stateManager.SetApprovalStatus(userID, "approved")

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
	msg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		"‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–∫—Å—Ç –æ—Å—Ç–∞–ª—Å—è –≤ —á–∞—Ç–µ.\n\n–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å –º–æ—â–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ —Ç–≤–æ–∏—Ö –∏–¥–µ–π. –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å:",
	)
	keyboard := bot.CreateMainKeyboard()
	msg.ReplyMarkup = &keyboard
	bot.Send(msg)
}

// handleApprove –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–≥–ª–∞—Å–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
func (ih *InlineHandler) handleApprove(bot *Bot, callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –≤ –ë–î (–∑–∞–≥–ª—É—à–∫–∞)
	state := ih.stateManager.GetState(userID)
	if state.CurrentPost != nil {
		ih.stateManager.SavePost(userID, *state.CurrentPost)
		log.Printf("–ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î (–∑–∞–≥–ª—É—à–∫–∞): %s", state.CurrentPost.ContentType)
	}

	// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	ih.stateManager.UpdateStep(userID, "idle")
	ih.stateManager.SetCurrentPost(userID, nil)
	ih.stateManager.ClearVoiceMessages(userID)
	ih.stateManager.ClearPendingVoices(userID)
	ih.stateManager.SetApprovalStatus(userID, "approved")

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	text := "‚úÖ –ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–∫—Å—Ç –æ—Å—Ç–∞–ª—Å—è –≤ —á–∞—Ç–µ.\n\n–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å –º–æ—â–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ —Ç–≤–æ–∏—Ö –∏–¥–µ–π. –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å:"
	keyboard := bot.CreateMainKeyboard()

	msg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
	)
	msg.ReplyMarkup = &keyboard
	bot.Send(msg)
}

// handleEditStartCreation –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–æ–∫
func (ih *InlineHandler) handleEditStartCreation(bot *Bot, callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID
	state := ih.stateManager.GetState(userID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–∞–≤–æ–∫
	if state.PendingEdits == nil || len(state.PendingEdits) == 0 {
		msg := tgbotapi.NewEditMessageText(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			"‚ùå –ù–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–∞–≤–∫–∞–º–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏.",
		)
		bot.Send(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –µ—Å—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
	hasInvalidFiles := false
	for _, voice := range state.PendingEdits {
		if voice.FilePath == "" {
			hasInvalidFiles = true
			break
		}
	}

	if hasInvalidFiles {
		msg := tgbotapi.NewEditMessageText(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			"‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∫–∞–º–∏ –Ω–µ –±—ã–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö —Å–Ω–æ–≤–∞.",
		)
		bot.Send(msg)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
	msg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		"‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–∞–≤–æ–∫...",
	)
	bot.Send(msg)

	// –°–æ–∑–¥–∞–µ–º WaitGroup –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	var wg sync.WaitGroup
	results := make([]string, 0)
	resultsMutex := &sync.Mutex{}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∫–∞–º–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
	for fileID, voice := range state.PendingEdits {
		wg.Add(1)
		go func(fileID string, voice *VoiceTranscription) {
			defer wg.Done()

			// –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º —Ñ–∞–π–ª
			text, err := ih.voiceHandler.TranscribeVoiceFile(voice.FilePath)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∫–∞–º–∏: %v", err)
				return
			}

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
			resultsMutex.Lock()
			results = append(results, text)
			resultsMutex.Unlock()

			// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
			if err := os.Remove(voice.FilePath); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ %s: %v", voice.FilePath, err)
			}
		}(fileID, voice)
	}

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	wg.Wait()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	if len(results) == 0 {
		msg := tgbotapi.NewMessage(
			callback.Message.Chat.ID,
			"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∫–∞–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
		)
		bot.Send(msg)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–æ–∫
	editText := strings.Join(results, "\n\n")

	// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
	originalText := state.LastGeneratedText
	if originalText == "" {
		originalText = "–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ò–ò —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –ø—Ä–∞–≤–∫–∞–º–∏
	prompt := fmt.Sprintf("–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:\n%s\n\n–ü—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n%s\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–µ—Å–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", originalText, editText)

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç —á–µ—Ä–µ–∑ VoiceHandler
	updatedText, err := ih.voiceHandler.GenerateTelegramPost(prompt)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: %v", err)
		msg := tgbotapi.NewMessage(
			callback.Message.Chat.ID,
			"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
		)
		bot.Send(msg)
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç
	state.CurrentPost.Content = updatedText
	state.CurrentPost.Messages = append(state.CurrentPost.Messages, results...)
	ih.stateManager.SetLastGeneratedText(userID, updatedText)
	ih.stateManager.SetApprovalStatus(userID, "pending")

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è
	keyboard := bot.CreateEditApprovalKeyboard()
	resultMsg := tgbotapi.NewMessage(
		callback.Message.Chat.ID,
		updatedText,
	)
	resultMsg.ReplyMarkup = keyboard
	bot.Send(resultMsg)
}

// processVoiceMessages –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (ih *InlineHandler) processVoiceMessages(bot *Bot, callback *tgbotapi.CallbackQuery, state *UserState) {
	userID := callback.From.ID

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	allMessages := strings.Join(state.VoiceMessages, "\n\n")

	// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
	log.Printf("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã: %v", ih.prompts)
	contentPrompts, ok := ih.prompts[state.ContentType]
	if !ok {
		log.Printf("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ '%s'", state.ContentType)
		msg := tgbotapi.NewEditMessageText(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			"‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
		)
		bot.Send(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
	log.Printf("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è %s: %v", state.ContentType, contentPrompts)

	var resultText string
	// TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenAI API
	if state.CurrentPost != nil {
		// –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
		// TODO: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å contentPrompts["edit"]["system"] –∫–∞–∫ system prompt
		// –∏ contentPrompts["edit"]["user"] –∫–∞–∫ user prompt, –∑–∞–º–µ–Ω–∏–≤:
		// {current_text} –Ω–∞ state.CurrentPost.Content
		// {new_text} –Ω–∞ allMessages
		resultText = "ü§ñ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –Ω–æ–≤—ã—Ö –∏–¥–µ–π:\n\n" +
			"[–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: " + state.ContentType + ", —Ä–µ–∂–∏–º: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ]\n\n" +
			"–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ–∫—Å—Ç:\n" + state.CurrentPost.Content + "\n\n" +
			"–ù–æ–≤—ã–µ –∏–¥–µ–∏:\n" + allMessages
	} else {
		// –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –ø–æ—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
		// TODO: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å contentPrompts["system"] –∫–∞–∫ system prompt
		// –∏ contentPrompts["user"] –∫–∞–∫ user prompt, –∑–∞–º–µ–Ω–∏–≤:
		// {text} –Ω–∞ allMessages
		resultText = "ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –∏–¥–µ–π:\n\n" +
			"[–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: " + state.ContentType + ", —Ä–µ–∂–∏–º: —Å–æ–∑–¥–∞–Ω–∏–µ]\n\n" +
			allMessages
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç
	post := Post{
		ContentType: state.ContentType,
		Content:     resultText,
		Messages:    state.VoiceMessages,
	}

	// –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	if state.CurrentPost != nil {
		post.Messages = append(state.CurrentPost.Messages, state.VoiceMessages...)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç
	ih.stateManager.SetCurrentPost(userID, &post)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
	keyboard := bot.CreatePostActionKeyboard()
	msg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		resultText,
	)
	msg.ReplyMarkup = &keyboard

	bot.Send(msg)

	// –û—á–∏—â–∞–µ–º –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	ih.stateManager.ClearVoiceMessages(userID)
	ih.stateManager.UpdateStep(userID, "idle")
}

// handleHelp –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏
func (ih *InlineHandler) handleHelp(bot *Bot, callback *tgbotapi.CallbackQuery) {
	text := `üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –¥–ª—è Telegram
‚Ä¢ –°—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è YouTube –≤–∏–¥–µ–æ
‚Ä¢ –°—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è Instagram Reels
‚Ä¢ –ü–æ—Å—Ç—ã –¥–ª—è Instagram

üé§ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–¥–µ—è–º–∏
3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å—Ç–µ –µ—â–µ —Å–æ–æ–±—â–µ–Ω–∏—è
4. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç

üí° –°–æ–≤–µ—Ç—ã:
‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ
‚Ä¢ –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –ø–æ–¥—Ä—è–¥
‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è`

	msg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
	)

	bot.Send(msg)
}

// handleProfile –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Ñ–∏–ª—è
func (ih *InlineHandler) handleProfile(bot *Bot, callback *tgbotapi.CallbackQuery) {
	text := `üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å

üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ` + strconv.FormatInt(callback.From.ID, 10) + `
üìä –¢–∞—Ä–∏—Ñ: –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π
üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: 0/5`

	msg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
	)

	bot.Send(msg)
}

// handleSubscription –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
func (ih *InlineHandler) handleSubscription(bot *Bot, callback *tgbotapi.CallbackQuery) {
	text := `üíé –ü–æ–¥–ø–∏—Å–∫–∞

üìä –¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π
‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –ë–µ—Å—Å—Ä–æ—á–Ω–æ

‚ú® –ü—Ä–µ–º–∏—É–º —Ç–∞—Ä–∏—Ñ:
‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º

üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: 299‚ÇΩ/–º–µ—Å—è—Ü`

	msg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
	)

	bot.Send(msg)
}

// handleUnknownCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ callback
func (ih *InlineHandler) handleUnknownCallback(bot *Bot, callback *tgbotapi.CallbackQuery) {
	msg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
	)
	bot.Send(msg)
}
