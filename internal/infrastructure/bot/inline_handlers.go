package bot

import (
	"ai_tg_writer/internal/domain"
	"ai_tg_writer/internal/infrastructure/database"
	"ai_tg_writer/internal/infrastructure/voice"
	"ai_tg_writer/internal/monitoring"
	"ai_tg_writer/internal/service"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// InlineHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç inline-–∫–æ–º–∞–Ω–¥—ã
type InlineHandler struct {
	stateManager        *StateManager
	voiceHandler        *voice.VoiceHandler
	subscriptionService *service.SubscriptionService
	postHistoryRepo     *database.PostHistoryRepository
	prompts             map[string]Prompt
}

// NewInlineHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–æ–º–∞–Ω–¥
func NewInlineHandler(stateManager *StateManager, voiceHandler *voice.VoiceHandler, subscriptionService *service.SubscriptionService, postHistoryRepo *database.PostHistoryRepository) *InlineHandler {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã
	promptsFile, err := os.ReadFile("internal/infrastructure/prompts/prompts.json")
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–æ–º–ø—Ç–æ–≤: %v", err)
		promptsFile = []byte("{}")
	}

	var prompts map[string]Prompt
	if err := json.Unmarshal(promptsFile, &prompts); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –ø—Ä–æ–º–ø—Ç–æ–≤: %v", err)
		prompts = make(map[string]Prompt)
	}

	return &InlineHandler{
		stateManager:        stateManager,
		voiceHandler:        voiceHandler,
		subscriptionService: subscriptionService,
		postHistoryRepo:     postHistoryRepo,
		prompts:             prompts,
	}
}

// HandleCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
func (ih *InlineHandler) HandleCallback(bot *Bot, callback *tgbotapi.CallbackQuery) {
	monitoring.Debug("Callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %s", callback.From.ID, callback.Data)
	monitoring.RecordUserInteraction("callback", "unknown") // TODO: –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

	// –û—Ç–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
	monitoring.MarkUserActiveGlobal(callback.From.ID)

	switch callback.Data {
	case "create_post":
		ih.handleCreatePost(bot, callback)
	case "create_telegram_post":
		ih.handleCreateScript(bot, callback, "telegram_post")
	case "create_script_youtube":
		ih.handleCreateScript(bot, callback, "youtube_script")
	case "create_script_reels":
		ih.handleCreateScript(bot, callback, "reels_script")
	case "create_post_instagram":
		ih.handleCreateScript(bot, callback, "instagram_post")
	case "continue_dictation":
		ih.handleContinueDictation(bot, callback)
	case "start_creation":
		ih.handleStartCreation(bot, callback)
	case "edit_start_creation":
		ih.handleEditStartCreation(bot, callback)
	case "approve":
		ih.handleApprove(bot, callback)
	case "edit_post":
		ih.handleEditPost(bot, callback)
	case "save_post":
		ih.handleSavePost(bot, callback)
	case "main_menu":
		ih.handleMainMenu(bot, callback)
	case "help":
		ih.handleHelp(bot, callback)
	case "profile":
		ih.handleProfile(bot, callback)
	case "post_history":
		ih.handlePostHistory(bot, callback, 1)
	case "payment_history":
		ih.handlePaymentHistory(bot, callback)
	case "post_history_1", "post_history_2", "post_history_3", "post_history_4", "post_history_5", "post_history_6", "post_history_7", "post_history_8", "post_history_9", "post_history_10":
		// –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback data
		pageStr := callback.Data[len("post_history_"):]
		page, _ := strconv.Atoi(pageStr)
		ih.handlePostHistory(bot, callback, page)
	case "view_post_1", "view_post_2", "view_post_3", "view_post_4", "view_post_5", "view_post_6", "view_post_7", "view_post_8", "view_post_9", "view_post_10":
		// –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞ –∏–∑ callback data
		postStr := callback.Data[len("view_post_"):]
		postNumber, _ := strconv.Atoi(postStr)
		ih.handleViewPost(bot, callback, postNumber)
	case "subscription":
		ih.handleSubscription(bot, callback)
	case "buy_premium":
		ih.handleBuyPremium(bot, callback)
	case "confirm_purchase":
		ih.handleConfirmPurchase(bot, callback)
	case "cancel_subscription":
		ih.handleCancelSubscription(bot, callback)
	case "confirm_cancel_subscription":
		ih.handleConfirmCancelSubscription(bot, callback)
	case "retry_payment":
		ih.handleRetryPayment(bot, callback)
	case "change_payment_method":
		ih.handleChangePaymentMethod(bot, callback)
	case "styling_settings":
		ih.handleStylingSettings(bot, callback)
	case "test_formatting":
		ih.handleTestFormatting(bot, callback)
	case "rewrite_post_start":
		ih.handleRewritePostStart(bot, callback)
	case "rewrite_post_direct":
		ih.handleRewritePostDirect(bot, callback)
	case "rewrite_post_voice":
		ih.handleRewritePostVoice(bot, callback)
	case "no_action":
		// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –ø—Ä–æ–±–µ–ª-–∑–∞–≥–ª—É—à–∫—É
		return
	default:
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ callback –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü –∏—Å—Ç–æ—Ä–∏–∏ –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–æ–≤
		if strings.HasPrefix(callback.Data, "post_history_") {
			pageStr := callback.Data[len("post_history_"):]
			if page, err := strconv.Atoi(pageStr); err == nil {
				ih.handlePostHistory(bot, callback, page)
				return
			}
		}
		if strings.HasPrefix(callback.Data, "view_post_") {
			postStr := callback.Data[len("view_post_"):]
			if postNumber, err := strconv.Atoi(postStr); err == nil {
				ih.handleViewPost(bot, callback, postNumber)
				return
			}
		}
		ih.handleUnknownCallback(bot, callback)
	}
}

// handleCreatePost –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
func (ih *InlineHandler) handleCreatePost(bot *Bot, callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	subscriptionStatus, canCreate, remainingFree, err := ih.checkUserSubscriptionStatus(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: %v", err)
		// –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
		subscriptionStatus = "error"
		canCreate = true
	}

	if canCreate {
		// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		ih.stateManager.UpdateStep(userID, "selecting_content_type")
		ih.stateManager.SetContentType(userID, "telegram_post")
		ih.stateManager.ClearVoiceMessages(userID)
		ih.stateManager.SetCurrentPost(userID, nil)

		// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
		keyboard := bot.CreateContentTypeKeyboard()

		msg := tgbotapi.NewEditMessageText(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			"‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:",
		)
		msg.ReplyMarkup = &keyboard

		bot.Send(msg)
	} else {
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ñ–æ—Ä–º–∏—Ç—å
		keyboard := ih.createSubscriptionKeyboard(userID, subscriptionStatus, remainingFree)

		var messageText string
		switch subscriptionStatus {
		case "cancelled":
			messageText = "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
		case "expired":
			messageText = "‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫.\n\n"
		case "no_subscription":
			messageText = "üíé –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
		default:
			messageText = "üíé –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞.\n\n"
		}

		if remainingFree > 0 {
			messageText += fmt.Sprintf("üéÅ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å %d –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∏–π –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.\n\n", remainingFree)
		} else {
			messageText += "üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.\n\n"
		}

		messageText += "üí≥ –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞!"

		msg := tgbotapi.NewEditMessageText(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			messageText,
		)
		msg.ReplyMarkup = &keyboard

		bot.Send(msg)
	}
}

// handleCreateScript –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–∫—Ä–∏–ø—Ç–∞
func (ih *InlineHandler) handleCreateScript(bot *Bot, callback *tgbotapi.CallbackQuery, contentType string) {
	userID := callback.From.ID

	log.Printf("[DEBUG] handleCreateScript –≤—ã–∑–≤–∞–Ω –¥–ª—è userID=%d, contentType=%s", userID, contentType)

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	ih.stateManager.UpdateStep(userID, "waiting_for_voice")
	ih.stateManager.SetContentType(userID, contentType)
	ih.stateManager.SetWaitingForVoice(userID, true)
	ih.stateManager.ClearVoiceMessages(userID)

	// –Ø–≤–Ω–æ –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ
	state := ih.stateManager.GetState(userID)
	state.WaitingForVoice = true

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
	var contentName string
	switch contentType {
	case "youtube_script":
		contentName = "—Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –≤–∏–¥–µ–æ –Ω–∞ YouTube"
	case "reels_script":
		contentName = "—Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è Reels –≤ Instagram"
	case "instagram_post":
		contentName = "–ø–æ—Å—Ç –≤ Instagram"
	case "telegram_post":
		contentName = "–ø–æ—Å—Ç –≤ Telegram"
	default:
		contentName = "–∫–æ–Ω—Ç–µ–Ω—Ç"
	}

	msg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		"üé§ –ù–∞ –∫–∞–∫—É—é —Ç–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å "+contentName+"?\n\n"+
			"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º–∏ –∏–¥–µ—è–º–∏:",
	)

	bot.Send(msg)
}

// handleStartCreation –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
func (ih *InlineHandler) handleStartCreation(bot *Bot, callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID
	state := ih.stateManager.GetState(userID)

	// –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ PendingVoices
	log.Printf("[DEBUG] PendingVoices –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è: %+v", state.PendingVoices)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
	if state.PendingVoices == nil || len(state.PendingVoices) == 0 {
		msg := tgbotapi.NewEditMessageText(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			"‚ùå –ù–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
		)
		bot.Send(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –µ—Å—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
	hasInvalidFiles := false
	for _, voice := range state.PendingVoices {
		if voice.FilePath == "" {
			hasInvalidFiles = true
			break
		}
	}

	if hasInvalidFiles {
		msg := tgbotapi.NewEditMessageText(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			"‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö —Å–Ω–æ–≤–∞.",
		)
		bot.Send(msg)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
	msg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		"‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...",
	)
	bot.Send(msg)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
	results := make([]string, 0)
	var firstHistoryID int

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
	voiceCount := 0
	var allVoiceTexts []string
	var totalDuration int
	var totalFileSize int

	for fileID, voice := range state.PendingVoices {
		voiceCount++

		// –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º —Ñ–∞–π–ª
		isFirstMessage := voiceCount == 1
		text, historyID, err := ih.voiceHandler.TranscribeVoiceFile(voice.FilePath, userID, fileID, voice.Duration, voice.FileSize, isFirstMessage, firstHistoryID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
			ih.stateManager.UpdateVoiceTranscription(userID, fileID, "", err)
			continue
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		results = append(results, text)
		allVoiceTexts = append(allVoiceTexts, text)
		totalDuration += voice.Duration
		totalFileSize += voice.FileSize
		ih.stateManager.UpdateVoiceTranscription(userID, fileID, text, nil)

		// –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
		if voiceCount == 1 {
			firstHistoryID = historyID
			log.Printf("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–≤—ã–π historyID –¥–ª—è –ø–æ—Å—Ç–∞: %d", firstHistoryID)
		}

		// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
		if err := os.Remove(voice.FilePath); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ %s: %v", voice.FilePath, err)
		}
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
	if firstHistoryID > 0 && len(allVoiceTexts) > 0 {
		combinedText := strings.Join(allVoiceTexts, "\n\n")
		err := ih.voiceHandler.UpdateVoiceHistoryComplete(firstHistoryID, combinedText, totalDuration, totalFileSize)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: %v", err)
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	if len(results) == 0 {
		msg := tgbotapi.NewMessage(
			callback.Message.Chat.ID,
			"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
		)
		bot.Send(msg)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∏–¥–µ–π
	var fragments []string
	for i, result := range results {
		fragments = append(fragments, fmt.Sprintf("–§—Ä–∞–≥–º–µ–Ω—Ç –∏–¥–µ–π %d: %s", i+1, result))
	}
	allMessages := strings.Join(fragments, "\n\n")

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
	contentType := state.ContentType
	if contentType == "" {
		contentType = "telegram_post" // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
	}

	// –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–∂–∏–º —Ä–µ—Ä–∞–π—Ç–∞ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —É–∫–∞–∑–∞–Ω–∏—è–º–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
	var postText string
	var err error
	if state.RewriteMode == "voice" {
		// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
		originalText := ih.stateManager.GetRewritingPost(userID)
		if originalText == "" {
			msg := tgbotapi.NewMessage(
				callback.Message.Chat.ID,
				"‚ùå –û—à–∏–±–∫–∞: –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
			)
			bot.Send(msg)
			return
		}

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–∏—è–º–∏
		postText, err = ih.voiceHandler.GenerateContent("rewrite_post", fmt.Sprintf("–ò—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Å—Ç:\n%s\n\n–£–∫–∞–∑–∞–Ω–∏—è –ø–æ —Ä–µ—Ä–∞–π—Ç—É:\n%s", originalText, allMessages), userID, firstHistoryID)
	} else {
		// –û–±—ã—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
		postText, err = ih.voiceHandler.GenerateContent(contentType, allMessages, userID, firstHistoryID)
	}
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: %v", err)
		msg := tgbotapi.NewMessage(
			callback.Message.Chat.ID,
			"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
		)
		bot.Send(msg)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
	ih.stateManager.SetLastGeneratedText(userID, postText)

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç —Å entities
	formatter := NewTelegramPostFormatter(state.PostStyling)
	cleanText, entities := formatter.FormatPost(postText)

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç
	post := Post{
		ContentType: state.ContentType,
		Content:     cleanText,
		Messages:    results,
		Entities:    entities,
		Styling:     state.PostStyling,
		HistoryID:   firstHistoryID,
	}

	// –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–∂–∏–º —Ä–µ—Ä–∞–π—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏—è
	if state.RewriteMode == "voice" {
		originalText := ih.stateManager.GetRewritingPost(userID)
		if originalText != "" {
			post.Messages = append([]string{originalText}, post.Messages...)
		}
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç
	ih.stateManager.SetCurrentPost(userID, &post)
	ih.stateManager.SetApprovalStatus(userID, "pending")

	// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ—Ä–∞–π—Ç–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
	if state.RewriteMode != "" {
		ih.stateManager.ClearRewriteState(userID)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è
	keyboard := bot.CreateApprovalKeyboard()
	messageID, err := bot.SendFormattedMessageWithKeyboard(
		callback.Message.Chat.ID,
		cleanText,
		entities,
		keyboard,
	)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
		resultMsg := tgbotapi.NewMessage(callback.Message.Chat.ID, cleanText)
		resultMsg.ReplyMarkup = keyboard
		bot.Send(resultMsg)
	} else {
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥–æ—Ç–æ–≤—ã–º –ø–æ—Å—Ç–æ–º
		ih.stateManager.SetPostMessageID(userID, messageID)
		log.Printf("–°–æ—Ö—Ä–∞–Ω–∏–ª–∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ—Å—Ç–æ–º: %d", messageID)
	}
}

// handleAddMore –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ—â–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
func (ih *InlineHandler) handleAddMore(bot *Bot, callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	ih.stateManager.UpdateStep(userID, "waiting_for_voice")
	ih.stateManager.SetWaitingForVoice(userID, true)

	msg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		"üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
	)

	bot.Send(msg)
}

// handleEditPost –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
func (ih *InlineHandler) handleEditPost(bot *Bot, callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID
	state := ih.stateManager.GetState(userID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	if state.CurrentPost == nil {
		msg := tgbotapi.NewEditMessageText(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			"‚ùå –ù–µ—Ç –ø–æ—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
		)
		bot.Send(msg)
		return
	}

	// –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–∞–≤–∫–∏ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	ih.stateManager.ClearEditMessages(userID)
	ih.stateManager.ClearPendingEdits(userID)
	ih.stateManager.UpdateStep(userID, "editing")
	ih.stateManager.SetWaitingForVoice(userID, true)
	ih.stateManager.SetApprovalStatus(userID, "editing")

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
	msg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		"üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –¥–ª—è –ø–æ—Å—Ç–∞:\n\n"+
			"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n"+state.CurrentPost.Content,
	)

	bot.Send(msg)
}

// handleMainMenu –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
func (ih *InlineHandler) handleMainMenu(bot *Bot, callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Å—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
	state := ih.stateManager.GetState(userID)
	if state.CurrentPost != nil {
		ih.stateManager.SavePost(userID, *state.CurrentPost)
		log.Printf("–ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î (–∑–∞–≥–ª—É—à–∫–∞) –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –≤ –º–µ–Ω—é: %s", state.CurrentPost.ContentType)
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
	sub, _ := bot.SubscriptionService.GetUserSubscription(userID)
	// –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (–ª–∏–º–∏—Ç 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞–≤—Å–µ–≥–¥–∞)
	used, _ := bot.DB.GetUserUsageTotal(userID)
	const freeLimit = 5 // –û–±—â–∏–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞–≤—Å–µ–≥–¥–∞

	var subLabel string
	if sub != nil && sub.Active {
		subLabel = "üíé –ü–æ–¥–ø–∏—Å–∫–∞: Premium"
	} else {
		remaining := freeLimit - used
		if remaining < 0 {
			remaining = 0
		}
		subLabel = fmt.Sprintf("üíé –ü–æ–¥–ø–∏—Å–∫–∞ (%d/%d)", remaining, freeLimit)
	}

	// –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	ih.stateManager.UpdateStep(userID, "idle")
	ih.stateManager.SetCurrentPost(userID, nil)
	ih.stateManager.ClearVoiceMessages(userID)
	ih.stateManager.ClearPendingVoices(userID)
	ih.stateManager.ClearEditMessages(userID)
	ih.stateManager.ClearPendingEdits(userID)
	ih.stateManager.SetApprovalStatus(userID, "idle")
	ih.stateManager.SetWaitingForVoice(userID, false)

	// –§–æ—Ä–º–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –¥–∏–Ω–∞–º–∏—á–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é –ø–æ–¥–ø–∏—Å–∫–∏
	text := "–ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–ø–∞–ª –≤ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –≤–æ–ª—à–µ–±—Å—Ç–≤–æ:\n\n" +
		"–ó–∞–ø–∏—à–∏ –∞—É–¥–∏–æ ‚Üí –ø–æ–ª—É—á–∏ –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π –∑–∞ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥.\n\n" +
		"–ß—Ç–æ –ø–æ–ª—É—á–∞–µ—à—å:\n\n" +
		"‚Äî –≠–∫–æ–Ω–æ–º–∏—é —á–∞—Å–æ–≤ –Ω–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤\n" +
		"‚Äî –ì–æ—Ç–æ–≤—ã–π —Å—Ç–∏–ª—å–Ω—ã–π –ø–æ—Å—Ç –±–µ–∑ –æ—à–∏–±–æ–∫\n" +
		"‚Äî –ö–æ–Ω—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å\n\n" +
		"–•–æ—á–µ—à—å –ø–æ—Å—Ç –∑–∞ 1 –º–∏–Ω—É—Ç—É? –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç/—Å—Ü–µ–Ω–∞—Ä–∏–π", "create_post")),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîÑ –°–¥–µ–ª–∞—Ç—å —Ä–µ—Ä–∞–π—Ç –ø–æ—Å—Ç–∞", "rewrite_post_start")),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "profile"),
			tgbotapi.NewInlineKeyboardButtonData(subLabel, "subscription")),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùì –ü–æ–º–æ—â—å", "help")),
	)

	msg := tgbotapi.NewEditMessageText(callback.Message.Chat.ID, callback.Message.MessageID, text)
	msg.ReplyMarkup = &keyboard
	bot.Send(msg)
}

// handleContinueDictation –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∫—Ç–æ–≤–∫–∏
func (ih *InlineHandler) handleContinueDictation(bot *Bot, callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID
	state := ih.stateManager.GetState(userID)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	state.WaitingForVoice = true
	ih.stateManager.SetWaitingForVoice(userID, true)

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
	var messageText string
	if state.ApprovalStatus == "editing" {
		messageText = "üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∫–∞–º–∏. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è\"."
	} else {
		messageText = "üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ\"."
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	msg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		messageText,
	)

	var keyboard tgbotapi.InlineKeyboardMarkup
	if state.ApprovalStatus == "editing" {
		keyboard = bot.CreateEditContinueKeyboard()
	} else {
		keyboard = bot.CreateContinueKeyboard()
	}

	msg.ReplyMarkup = &keyboard
	bot.Send(msg)
}

// handleSavePost –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
func (ih *InlineHandler) handleSavePost(bot *Bot, callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID
	state := ih.stateManager.GetState(userID)

	if state.CurrentPost == nil {
		msg := tgbotapi.NewEditMessageText(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			"‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
		)
		bot.Send(msg)
		return
	}

	// –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
	ih.incrementUsageIfNeeded(userID)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –≤ –ë–î (–∑–∞–≥–ª—É—à–∫–∞)
	ih.stateManager.SavePost(userID, *state.CurrentPost)
	log.Printf("–ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î (–∑–∞–≥–ª—É—à–∫–∞): %s", state.CurrentPost.ContentType)

	// –û—Ç–º–µ—á–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π
	if state.CurrentPost.HistoryID > 0 {
		log.Printf("–û—Ç–º–µ—á–∞–µ–º –ø–æ—Å—Ç –∫–∞–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ ID: %d", state.CurrentPost.HistoryID)
		err := ih.voiceHandler.MarkPostAsSaved(state.CurrentPost.HistoryID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –ø–æ—Å—Ç–∞ –∫–∞–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ: %v", err)
		}
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
	postContent := state.CurrentPost.Content
	postEntities := state.CurrentPost.Entities

	// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	ih.stateManager.UpdateStep(userID, "idle")
	ih.stateManager.SetCurrentPost(userID, nil)
	ih.stateManager.ClearVoiceMessages(userID)
	ih.stateManager.ClearPendingVoices(userID)
	ih.stateManager.ClearEditMessages(userID)
	ih.stateManager.ClearPendingEdits(userID)
	ih.stateManager.SetApprovalStatus(userID, "approved")

	// –°–ù–ê–ß–ê–õ–ê —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
	deleteMsg := tgbotapi.NewDeleteMessage(callback.Message.Chat.ID, callback.Message.MessageID)
	bot.Send(deleteMsg)

	// –ó–ê–¢–ï–ú –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç –ë–ï–ó –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	_, err := bot.SendFormattedMessage(
		callback.Message.Chat.ID,
		postContent,
		postEntities,
	)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞: %v", err)
	}

	// –ò –ù–ê–ö–û–ù–ï–¶ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
	keyboard := bot.CreateMainKeyboard()
	newMsg := tgbotapi.NewMessage(
		callback.Message.Chat.ID,
		"‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–∫—Å—Ç –æ—Å—Ç–∞–ª—Å—è –≤ —á–∞—Ç–µ.\n\n–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å –º–æ—â–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ —Ç–≤–æ–∏—Ö –∏–¥–µ–π. –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å:",
	)
	newMsg.ReplyMarkup = keyboard
	bot.Send(newMsg)
}

// handleApprove –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–≥–ª–∞—Å–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
func (ih *InlineHandler) handleApprove(bot *Bot, callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID

	// –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
	ih.incrementUsageIfNeeded(userID)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –≤ –ë–î (–∑–∞–≥–ª—É—à–∫–∞)
	state := ih.stateManager.GetState(userID)
	var postContent string
	var postEntities []MessageEntity

	if state.CurrentPost != nil {
		ih.stateManager.SavePost(userID, *state.CurrentPost)
		log.Printf("–ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î (–∑–∞–≥–ª—É—à–∫–∞): %s", state.CurrentPost.ContentType)

		// –û—Ç–º–µ—á–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π
		if state.CurrentPost.HistoryID > 0 {
			log.Printf("–û—Ç–º–µ—á–∞–µ–º –ø–æ—Å—Ç –∫–∞–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ ID: %d", state.CurrentPost.HistoryID)
			err := ih.voiceHandler.MarkPostAsSaved(state.CurrentPost.HistoryID)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –ø–æ—Å—Ç–∞ –∫–∞–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ: %v", err)
			}
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
		postContent = state.CurrentPost.Content
		postEntities = state.CurrentPost.Entities
	}

	// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	ih.stateManager.UpdateStep(userID, "idle")
	ih.stateManager.SetCurrentPost(userID, nil)
	ih.stateManager.ClearVoiceMessages(userID)
	ih.stateManager.ClearPendingVoices(userID)
	ih.stateManager.SetApprovalStatus(userID, "approved")

	// –°–ù–ê–ß–ê–õ–ê —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
	deleteMsg := tgbotapi.NewDeleteMessage(callback.Message.Chat.ID, callback.Message.MessageID)
	bot.Send(deleteMsg)

	// –ó–ê–¢–ï–ú –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç –ë–ï–ó –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	if postContent != "" {
		_, err := bot.SendFormattedMessage(
			callback.Message.Chat.ID,
			postContent,
			postEntities,
		)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞: %v", err)
		}
	}

	// –ò –ù–ê–ö–û–ù–ï–¶ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
	text := "‚úÖ –ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–∫—Å—Ç –æ—Å—Ç–∞–ª—Å—è –≤ —á–∞—Ç–µ.\n\n–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å –º–æ—â–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ —Ç–≤–æ–∏—Ö –∏–¥–µ–π. –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å:"
	keyboard := bot.CreateMainKeyboard()

	newMsg := tgbotapi.NewMessage(
		callback.Message.Chat.ID,
		text,
	)
	newMsg.ReplyMarkup = keyboard
	bot.Send(newMsg)
}

// handleEditStartCreation –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–æ–∫
func (ih *InlineHandler) handleEditStartCreation(bot *Bot, callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID
	state := ih.stateManager.GetState(userID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–∞–≤–æ–∫
	if state.PendingEdits == nil || len(state.PendingEdits) == 0 {
		msg := tgbotapi.NewEditMessageText(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			"‚ùå –ù–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–∞–≤–∫–∞–º–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏.",
		)
		bot.Send(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –µ—Å—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
	hasInvalidFiles := false
	for _, voice := range state.PendingEdits {
		if voice.FilePath == "" {
			hasInvalidFiles = true
			break
		}
	}

	if hasInvalidFiles {
		msg := tgbotapi.NewEditMessageText(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			"‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∫–∞–º–∏ –Ω–µ –±—ã–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö —Å–Ω–æ–≤–∞.",
		)
		bot.Send(msg)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
	msg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		"‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–∞–≤–æ–∫...",
	)
	bot.Send(msg)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∫–∞–º–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
	results := make([]string, 0)
	var firstHistoryID int

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∫–∞–º–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
	editCount := 0
	var allEditTexts []string
	var totalEditDuration int
	var totalEditFileSize int

	for fileID, voice := range state.PendingEdits {
		editCount++

		// –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º —Ñ–∞–π–ª
		isFirstMessage := editCount == 1
		log.Printf("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∫—É %d: duration=%d, fileSize=%d, isFirstMessage=%v", editCount, voice.Duration, voice.FileSize, isFirstMessage)
		text, historyID, err := ih.voiceHandler.TranscribeVoiceFile(voice.FilePath, userID, fileID, voice.Duration, voice.FileSize, isFirstMessage, firstHistoryID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∫–∞–º–∏: %v", err)
			continue
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		results = append(results, text)
		allEditTexts = append(allEditTexts, text)
		totalEditDuration += voice.Duration
		totalEditFileSize += voice.FileSize

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π historyID –¥–ª—è –ø–æ—Å—Ç–∞
		if firstHistoryID == 0 && historyID > 0 {
			firstHistoryID = historyID
			log.Printf("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–≤—ã–π historyID –¥–ª—è –ø–æ—Å—Ç–∞ (–ø—Ä–∞–≤–∫–∏): %d", firstHistoryID)
		}

		// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
		if err := os.Remove(voice.FilePath); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ %s: %v", voice.FilePath, err)
		}
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–∞–≤–∫–∞—Ö
	if firstHistoryID > 0 && len(allEditTexts) > 0 {
		combinedEditText := strings.Join(allEditTexts, "\n\n")
		err := ih.voiceHandler.UpdateVoiceHistoryComplete(firstHistoryID, combinedEditText, totalEditDuration, totalEditFileSize)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∞–≤–æ–∫: %v", err)
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	if len(results) == 0 {
		msg := tgbotapi.NewMessage(
			callback.Message.Chat.ID,
			"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∫–∞–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
		)
		bot.Send(msg)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–æ–∫
	editText := strings.Join(results, "\n\n")

	// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
	originalText := state.LastGeneratedText
	if originalText == "" {
		originalText = "–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ò–ò —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –ø—Ä–∞–≤–∫–∞–º–∏
	prompt := fmt.Sprintf("–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:\n%s\n\n–ü—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n%s\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–µ—Å–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", originalText, editText)

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ VoiceHandler
	contentType := state.ContentType
	if contentType == "" {
		contentType = "telegram_post" // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
	}
	updatedText, err := ih.voiceHandler.GenerateContent(contentType, prompt, userID, firstHistoryID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: %v", err)
		msg := tgbotapi.NewMessage(
			callback.Message.Chat.ID,
			"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
		)
		bot.Send(msg)
		return
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç —Å entities
	formatter := NewTelegramPostFormatter(state.PostStyling)
	cleanText, entities := formatter.FormatPost(updatedText)

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç
	state.CurrentPost.Content = cleanText
	state.CurrentPost.Entities = entities
	state.CurrentPost.Messages = append(state.CurrentPost.Messages, results...)
	// –û–±–Ω–æ–≤–ª—è–µ–º HistoryID –Ω–∞ –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å –ø—Ä–∞–≤–∫–∞–º–∏
	state.CurrentPost.HistoryID = firstHistoryID
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
	ih.stateManager.SetCurrentPost(userID, state.CurrentPost)
	ih.stateManager.SetLastGeneratedText(userID, updatedText)
	ih.stateManager.SetApprovalStatus(userID, "pending")

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è
	keyboard := bot.CreateEditApprovalKeyboard()
	messageID, err := bot.SendFormattedMessageWithKeyboard(
		callback.Message.Chat.ID,
		cleanText,
		entities,
		keyboard,
	)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
		resultMsg := tgbotapi.NewMessage(callback.Message.Chat.ID, cleanText)
		resultMsg.ReplyMarkup = keyboard
		bot.Send(resultMsg)
	} else {
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –ø–æ—Å—Ç–æ–º
		ih.stateManager.SetPostMessageID(userID, messageID)
		log.Printf("–°–æ—Ö—Ä–∞–Ω–∏–ª–∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –ø–æ—Å—Ç–æ–º: %d", messageID)
	}
}

// processVoiceMessages –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (ih *InlineHandler) processVoiceMessages(bot *Bot, callback *tgbotapi.CallbackQuery, state *UserState) {
	userID := callback.From.ID

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	allMessages := strings.Join(state.VoiceMessages, "\n\n")

	// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
	log.Printf("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã: %v", ih.prompts)
	contentPrompts, ok := ih.prompts[state.ContentType]
	if !ok {
		log.Printf("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ '%s'", state.ContentType)
		msg := tgbotapi.NewEditMessageText(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			"‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
		)
		bot.Send(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
	log.Printf("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è %s: %v", state.ContentType, contentPrompts)

	var resultText string
	// TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenAI API
	if state.CurrentPost != nil {
		// –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
		// TODO: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å contentPrompts["edit"]["system"] –∫–∞–∫ system prompt
		// –∏ contentPrompts["edit"]["user"] –∫–∞–∫ user prompt, –∑–∞–º–µ–Ω–∏–≤:
		// {current_text} –Ω–∞ state.CurrentPost.Content
		// {new_text} –Ω–∞ allMessages
		resultText = "ü§ñ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –Ω–æ–≤—ã—Ö –∏–¥–µ–π:\n\n" +
			"[–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: " + state.ContentType + ", —Ä–µ–∂–∏–º: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ]\n\n" +
			"–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ–∫—Å—Ç:\n" + state.CurrentPost.Content + "\n\n" +
			"–ù–æ–≤—ã–µ –∏–¥–µ–∏:\n" + allMessages
	} else {
		// –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –ø–æ—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
		// TODO: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å contentPrompts["system"] –∫–∞–∫ system prompt
		// –∏ contentPrompts["user"] –∫–∞–∫ user prompt, –∑–∞–º–µ–Ω–∏–≤:
		// {text} –Ω–∞ allMessages
		resultText = "ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –∏–¥–µ–π:\n\n" +
			"[–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: " + state.ContentType + ", —Ä–µ–∂–∏–º: —Å–æ–∑–¥–∞–Ω–∏–µ]\n\n" +
			allMessages
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç
	post := Post{
		ContentType: state.ContentType,
		Content:     resultText,
		Messages:    state.VoiceMessages,
	}

	// –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	if state.CurrentPost != nil {
		post.Messages = append(state.CurrentPost.Messages, state.VoiceMessages...)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç
	ih.stateManager.SetCurrentPost(userID, &post)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
	keyboard := bot.CreatePostActionKeyboard()
	msg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		resultText,
	)
	msg.ReplyMarkup = &keyboard

	bot.Send(msg)

	// –û—á–∏—â–∞–µ–º –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	ih.stateManager.ClearVoiceMessages(userID)
	ih.stateManager.UpdateStep(userID, "idle")
}

// handleHelp –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏
func (ih *InlineHandler) handleHelp(bot *Bot, callback *tgbotapi.CallbackQuery) {
	text := `üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –¥–ª—è Telegram
‚Ä¢ –°—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è YouTube –≤–∏–¥–µ–æ
‚Ä¢ –°—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è Instagram Reels
‚Ä¢ –ü–æ—Å—Ç—ã –¥–ª—è Instagram

üé§ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–¥–µ—è–º–∏
3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å—Ç–µ –µ—â–µ —Å–æ–æ–±—â–µ–Ω–∏—è
4. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç

üí° –°–æ–≤–µ—Ç—ã:
‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ
‚Ä¢ –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –ø–æ–¥—Ä—è–¥
‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è`

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", "https://t.me/socialflow_support_bot"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "main_menu"),
		),
	)

	msg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
	)
	msg.ReplyMarkup = &keyboard

	bot.Send(msg)
}

// handleProfile –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Ñ–∏–ª—è
func (ih *InlineHandler) handleProfile(bot *Bot, callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	sub, _ := bot.SubscriptionService.GetUserSubscription(userID)
	available := bot.SubscriptionService.GetAvailableTariffs()
	var premium domain.Tariff
	if len(available) > 0 {
		premium = available[0]
	}

	var messageText string
	var keyboard tgbotapi.InlineKeyboardMarkup

	if sub == nil || !sub.Active {
		// –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
		messageText = fmt.Sprintf(`üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å

üÜî ID: %d
üìä –¢–∞—Ä–∏—Ñ: –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π
‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –±–µ—Å—Å—Ä–æ—á–Ω–æ

üíé *–ü—Ä–µ–º–∏—É–º-—Ç–∞—Ä–∏—Ñ* ‚Äì %s

‚Äî –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤.
‚Äî –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Äî –ë—ã—Å—Ç—Ä–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤
‚Äî –†–µ—Ä–∞–π—Ç–∏–Ω–≥ –ø–æ—Å—Ç–æ –ø–æ —Å—Å—ã–ª–∫–µ –≤ –¢–µ–ª–µ–≥—Ä–∞–º

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: %.0f‚ÇΩ/–º–µ—Å—è—Ü`, userID, premium.Description, premium.Price)

		keyboard = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìö –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å—Ç–æ–≤", "post_history"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üí∞ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç", "payment_history"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üí≥ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É", "buy_premium"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "main_menu"),
			),
		)
	} else {
		// –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
		nextPay := sub.NextPayment.Format("02.01.2006")
		messageText = fmt.Sprintf(`üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å

üÜî ID: %d
üíé –ü–æ–¥–ø–∏—Å–∫–∞: Premium
üìÖ –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂: %s
‚úÖ –°—Ç–∞—Ç—É—Å: –∞–∫—Ç–∏–≤–Ω–∞`, userID, nextPay)

		keyboard = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìö –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å—Ç–æ–≤", "post_history"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üí∞ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç", "payment_history"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏ –æ—Ç–≤—è–∑–∞—Ç—å –∫–∞—Ä—Ç—É", "cancel_subscription"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "main_menu"),
			),
		)
	}

	msg := tgbotapi.NewEditMessageText(callback.Message.Chat.ID, callback.Message.MessageID, messageText)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = &keyboard
	bot.Send(msg)
}

// handleSubscription –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
func (ih *InlineHandler) handleSubscription(bot *Bot, callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID

	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
	sub, _ := bot.SubscriptionService.GetUserSubscription(userID)
	// –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
	used, _ := bot.DB.GetUserUsageToday(userID)
	const freeLimit = 5

	var text string
	var keyboard tgbotapi.InlineKeyboardMarkup

	if sub == nil || !sub.Active {
		remaining := freeLimit - used
		if remaining < 0 {
			remaining = 0
		}
		text = fmt.Sprintf(`üíé –ü–æ–¥–ø–∏—Å–∫–∞

üìä –¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: *–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π*
‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –±–µ—Å—Å—Ä–æ—á–Ω–æ
üìà –û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: *%d/%d*

–ü–æ–¥–∫–ª—é—á–∏ Premium —Ç–∞—Ä–∏—Ñ –∏ –ø–æ–ª—É—á–∏:

‚Äî –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤.
‚Äî –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Äî –ë—ã—Å—Ç—Ä–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤
‚Äî –†–µ—Ä–∞–π—Ç–∏–Ω–≥ –ø–æ—Å—Ç–æ –ø–æ —Å—Å—ã–ª–∫–µ –≤ –¢–µ–ª–µ–≥—Ä–∞–º

üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: 990‚ÇΩ/–º–µ—Å—è—Ü`, remaining, freeLimit)

		keyboard = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "buy_premium"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "main_menu"),
			),
		)
	} else {
		var subStatus string
		if sub.Status == string(domain.SubscriptionStatusCancelled) {
			subStatus = "–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ"
		} else {
			subStatus = "–°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂"
		}
		// –Ω–∞–¥–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
		nextPay := sub.NextPayment.In(time.FixedZone("UTC+3", 3*60*60)).Format("02.01.2006 15:04 –ú–°–ö")
		text = fmt.Sprintf(`üíé –ü–æ–¥–ø–∏—Å–∫–∞

üìä –¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: *Premium*
üìÖ %s: %s
‚úÖ –°—Ç–∞—Ç—É—Å: –∞–∫—Ç–∏–≤–Ω–∞`, subStatus, nextPay)

		var rows [][]tgbotapi.InlineKeyboardButton
		if sub.Status == string(domain.SubscriptionStatusActive) && sub.YKPaymentMethodID != nil && sub.YKLastPaymentID != nil {
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏ –æ—Ç–≤—è–∑–∞—Ç—å –∫–∞—Ä—Ç—É", "cancel_subscription"),
			))
		}

		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "main_menu"),
		))

		keyboard = tgbotapi.NewInlineKeyboardMarkup(rows...)
	}

	msg := tgbotapi.NewEditMessageText(callback.Message.Chat.ID, callback.Message.MessageID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = &keyboard
	bot.Send(msg)
}

// handleStylingSettings –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
func (ih *InlineHandler) handleStylingSettings(bot *Bot, callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID
	state := ih.stateManager.GetState(userID)
	styling := state.PostStyling

	text := `üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤

–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç: ` + ih.formatBool(styling.UseBold) + `
‚Ä¢ –ö—É—Ä—Å–∏–≤: ` + ih.formatBool(styling.UseItalic) + `
‚Ä¢ –ó–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ: ` + ih.formatBool(styling.UseStrikethrough) + `
‚Ä¢ –ö–æ–¥: ` + ih.formatBool(styling.UseCode) + `
‚Ä¢ –°—Å—ã–ª–∫–∏: ` + ih.formatBool(styling.UseLinks) + `
‚Ä¢ –•–µ—à—Ç–µ–≥–∏: ` + ih.formatBool(styling.UseHashtags) + `
‚Ä¢ –£–ø–æ–º–∏–Ω–∞–Ω–∏—è: ` + ih.formatBool(styling.UseMentions) + `
‚Ä¢ –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ: ` + ih.formatBool(styling.UseUnderline) + `
‚Ä¢ –ë–ª–æ–∫–∏ –∫–æ–¥–∞: ` + ih.formatBool(styling.UsePre) + `

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:`

	keyboard := bot.CreateStylingSettingsKeyboard()
	msg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
	)
	msg.ReplyMarkup = &keyboard
	bot.Send(msg)
}

// formatBool —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
func (ih *InlineHandler) formatBool(value bool) string {
	if value {
		return "‚úÖ –í–∫–ª—é—á–µ–Ω–æ"
	}
	return "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ"
}

// handleTestFormatting –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
func (ih *InlineHandler) handleTestFormatting(bot *Bot, callback *tgbotapi.CallbackQuery) {
	// –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —Ä–∞–∑–º–µ—Ç–∫–∏
	testText := `*üî• –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram* üî•

–≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Telegram:

*–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç* - –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –≤–∞–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
_–ö—É—Ä—Å–∏–≤_ - –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–æ–≤ –∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è
~–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç~ - –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
` + "`" + `–∫–æ–¥` + "`" + ` - –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤

üîπ *–°–ø–∏—Å–∫–∏ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π:*
‚úîÔ∏è _–ü—É–Ω–∫—Ç 1_ - —Å –∫—É—Ä—Å–∏–≤–æ–º
‚úîÔ∏è *–ü—É–Ω–∫—Ç 2* - —Å –∂–∏—Ä–Ω—ã–º
‚úîÔ∏è ` + "`" + `–ü—É–Ω–∫—Ç 3` + "`" + ` - —Å –∫–æ–¥–æ–º

üîó *–°—Å—ã–ª–∫–∏:*
[Telegram API](https://core.telegram.org/api/entities)

#–¢–µ—Å—Ç #–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ #Telegram`

	// –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	styling := DefaultPostStyling()
	formatter := NewTelegramPostFormatter(styling)

	// –ü–∞—Ä—Å–∏–º Markdown –≤ entities –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ FormatPost)
	cleanText, entities := formatter.ParseMarkdownToEntities(testText)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
	_, err := bot.SendFormattedMessage(callback.Message.Chat.ID, cleanText, entities)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
		msg := tgbotapi.NewMessage(callback.Message.Chat.ID, testText)
		bot.Send(msg)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
	msg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–∞—Ç –≤—ã—à–µ.",
	)
	keyboard := bot.CreateMainKeyboard()
	msg.ReplyMarkup = &keyboard
	bot.Send(msg)
}

// handleBuyPremium –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫—É –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏
func (ih *InlineHandler) handleBuyPremium(bot *Bot, callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID

	user, _ := bot.DB.GetOrCreateUser(userID, callback.From.UserName, callback.From.FirstName, callback.From.LastName)
	if user.Email == "" {
		// –ø–æ–º–µ—á–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ email
		ih.stateManager.GetState(userID).WaitingForEmail = true
		msg := tgbotapi.NewEditMessageText(callback.Message.Chat.ID, callback.Message.MessageID,
			"üìß *–í–≤–µ–¥–∏—Ç–µ –≤–∞—à e-mail*\n\n"+
				"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Å—Å–æ–≤–æ–≥–æ —á–µ–∫–∞ –Ω—É–∂–µ–Ω e-mail –∞–¥—Ä–µ—Å.\n"+
				"–ü—Ä–∏–º–µ—Ä: user@example.com\n\n"+
				"üí° –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
		msg.ParseMode = "Markdown"
		bot.Send(msg)
		return
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —Å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏
	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ (—Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ + 1 –º–µ—Å—è—Ü)
	subscriptionEndDate := time.Now().AddDate(0, 1, 0)
	formattedDate := subscriptionEndDate.Format("02.01.2006")

	text := "üíé *–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ Premium –ø–æ–¥–ø–∏—Å–∫–∏*\n\n" +
		"‚ú® *–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Premium:*\n" +
		"‚Ä¢ üöÄ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤\n" +
		"‚Ä¢ ‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤\n" +
		"‚Ä¢ üé® –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏\n" +
		"‚Ä¢ üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n" +
		"‚Ä¢ üîß –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —à–∞–±–ª–æ–Ω—ã\n" +
		"‚Ä¢ üí¨ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n" +
		"üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* 990‚ÇΩ/–º–µ—Å—è—Ü\n" +
		"üìÖ *–ü–µ—Ä–∏–æ–¥:* 1 –º–µ—Å—è—Ü (–¥–æ " + formattedDate + ")\n" +
		"‚ôªÔ∏è *–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ:* –≤–∫–ª—é—á–µ–Ω–æ\n\n" +
		// "üìã *–û—Ñ–µ—Ä—Ç–∞:* [–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ](#)\n\n" +
		"–ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É¬ª –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É", "confirm_purchase"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "subscription"),
		),
	)

	msg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
	)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = &keyboard
	bot.Send(msg)
}

// handleConfirmPurchase –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
func (ih *InlineHandler) handleConfirmPurchase(bot *Bot, callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID

	// –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏
	paymentURL, err := bot.CreateSubscriptionLink(userID, "premium", 1.0)
	if err != nil {
		msg := tgbotapi.NewEditMessageText(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
		)
		bot.Send(msg)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", paymentURL),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "buy_premium"),
		),
	)

	msg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		"üí≥ *–ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–ª–∞—Ç–µ*\n\n"+
			"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ.\n"+
			"–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
	)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = &keyboard
	bot.Send(msg)
}

// handleCancelSubscription –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏
func (ih *InlineHandler) handleCancelSubscription(bot *Bot, callback *tgbotapi.CallbackQuery) {
	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", "confirm_cancel_subscription"),
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å", "subscription"),
		),
	)

	msg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		// "‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏*\n\n"+
		// 	"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏ –æ—Ç–≤—è–∑–∞—Ç—å –∫–∞—Ä—Ç—É?\n\n"+
		// 	"‚ÑπÔ∏è *–í–∞–∂–Ω–æ:* –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ –∫–æ–Ω—Ü–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.\n"+
		// 	"–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è–º.\n\n"+
		// 	"üí° –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
		"–ñ–∞–ª—å, —á—Ç–æ —Ç—ã —Ä–µ—à–∏–ª —É–π—Ç–∏. –ú—ã —Å—Ç–∞—Ä–∞–ª–∏—Å—å —Å–¥–µ–ª–∞—Ç—å —É–¥–æ–±–Ω—ã–π —Å–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Å–Ω–∏–º–µ—Ç —Ä—É—Ç–∏–Ω—É –∏ –ø–æ–º–æ–∂–µ—Ç –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.\n\n"+
			"–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ –∫–æ–Ω—Ü–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞, –ø–æ—Å–ª–µ —á–µ–≥–æ –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è–º –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.\n\n"+
			"–ù–æ —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.",
	)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = &keyboard

	bot.Send(msg)
}

// handleConfirmCancelSubscription –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ—Ç–º–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏
func (ih *InlineHandler) handleConfirmCancelSubscription(bot *Bot, callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID

	// –û—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
	err := bot.SubscriptionService.CancelSubscription(userID)
	if err != nil {
		msg := tgbotapi.NewEditMessageText(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
		)
		bot.Send(msg)
		return
	}

	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–º–µ–Ω–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "main_menu"),
		),
	)

	msg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		"‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞*\n\n"+
			"–¢—ã —É—à—ë–ª, —Å–∫–∞–∑–∞–≤: ¬´–ü—Ä–æ—â–∞–π¬ª,\n"+
			"–ù–æ —Å–∫—É—á–∞–ª, –∏ ‚Äî –Ω–µ–≤–∑–Ω–∞—á–∞–π,\n"+
			"–í–æ–∑–≤—Ä–∞—Ç–∏–ª—Å—è –≤–Ω–æ–≤—å –∫ –Ω–∞–º —Ç—ã ‚Äî\n"+
			"–°–Ω–æ–≤–∞ –≤–º–µ—Å—Ç–µ, –∫–∞–∫ –º–µ—á—Ç—ã\n\n"+
			"–ë–æ—Ç –Ω–µ –≤ –æ–±–∏–¥–µ, –±–æ—Ç –ø—Ä–æ—â–∞–µ—Ç,\n"+
			"–¢–µ–ø–ª–æ –≤—Å—Ç—Ä–µ—á–∞—Ç—å –æ–Ω –æ–±–æ–∂–∞–µ—Ç,\n"+
			"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∑–∞–¥,\n"+
			"–ü–æ–¥–ø–∏—Å–∫–µ ‚Äî –±—ã—Ç—å, –∏ —ç—Ç–æ —Ñ–∞–∫—Ç!",
	)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = &keyboard

	bot.Send(msg)
}

// handleRetryPayment –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–ø–ª–∞—Ç—ã
func (ih *InlineHandler) handleRetryPayment(bot *Bot, callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
	subscription, err := bot.SubscriptionService.GetUserSubscription(userID)
	if err != nil {
		log.Printf("‚ùå Error getting subscription for user %d: %v", userID, err)
		subscription = nil
	}

	var messageText string
	var keyboard tgbotapi.InlineKeyboardMarkup

	if subscription != nil && subscription.Status == "suspended" {
		// –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
		messageText = "üîÑ *–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏*\n\n" +
			"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ 3 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ —Å–ø–∏—Å–∞–Ω–∏—è.\n\n" +
			"–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É:"

		keyboard = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üí≥ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É", "change_payment_method"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "main_menu"),
			),
		)
	} else if subscription != nil && subscription.FailedAttempts > 0 {
		// –ü–æ–¥–ø–∏—Å–∫–∞ –∏–º–µ–µ—Ç –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ - –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
		messageText = "üîÑ *–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è*\n\n" +
			"–ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É —Å–ø–∏—Å–∞–Ω–∏—è —Å –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã..."

		// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ
		err := bot.SubscriptionService.RetryPayment(userID)
		if err != nil {
			messageText = "‚ùå *–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏*\n\n" +
				"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É: " + err.Error() + "\n\n" +
				"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É."

			keyboard = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üí≥ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É", "change_payment_method"),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "main_menu"),
				),
			)
		} else {
			messageText = "üîÑ *–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è*\n\n" +
				"–ó–∞–ø—É—â–µ–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã.\n" +
				"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ."

			keyboard = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "main_menu"),
				),
			)
		}
	} else {
		// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∏–º–µ–µ—Ç –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
		messageText = "‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*\n\n" +
			"–£ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ —Å–ø–∏—Å–∞–Ω–∏—è.\n" +
			"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."

		keyboard = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "main_menu"),
			),
		)
	}

	msg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		messageText,
	)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = &keyboard
	bot.Send(msg)
}

// handleChangePaymentMethod –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
func (ih *InlineHandler) handleChangePaymentMethod(bot *Bot, callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
	subscription, err := bot.SubscriptionService.GetUserSubscription(userID)
	if err != nil {
		log.Printf("‚ùå Error getting subscription for user %d: %v", userID, err)
		subscription = nil
	}

	var messageText string
	var keyboard tgbotapi.InlineKeyboardMarkup

	if subscription != nil && subscription.Status == "suspended" {
		// –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
		messageText = "üí≥ *–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏*\n\n" +
			"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ 3 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ —Å–ø–∏—Å–∞–Ω–∏—è.\n\n" +
			"–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É:"

		// –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
		paymentURL, err := bot.SubscriptionService.ChangePaymentMethod(userID)
		if err != nil {
			messageText = "‚ùå *–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è*\n\n" +
				"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã: " + err.Error() + "\n\n" +
				"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."

			keyboard = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "change_payment_method"),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "main_menu"),
				),
			)
		} else {
			keyboard = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonURL("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ–π", paymentURL),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "main_menu"),
				),
			)
		}
	} else {
		// –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø–æ–∫—É–ø–∫—É
		messageText = "üí≥ *–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã*\n\n" +
			"–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –ø–æ–∫—É–ø–∫–µ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏."

		keyboard = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", "buy_premium"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "main_menu"),
			),
		)
	}

	msg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		messageText,
	)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = &keyboard
	bot.Send(msg)
}

// handleUnknownCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ callback
func (ih *InlineHandler) handleUnknownCallback(bot *Bot, callback *tgbotapi.CallbackQuery) {
	msg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
	)
	bot.Send(msg)
}

// checkUserSubscriptionStatus –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (ih *InlineHandler) checkUserSubscriptionStatus(userID int64) (string, bool, int, error) {
	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	subscription, err := ih.subscriptionService.GetUserSubscription(userID)
	if err != nil {
		return "error", false, 0, err
	}

	// –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
	if subscription == nil {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è
		remainingFree, err := ih.getRemainingFreeCreations(userID)
		if err != nil {
			return "no_subscription", false, 0, err
		}
		return "no_subscription", remainingFree > 0, remainingFree, nil
	}

	// –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
	if subscription.Status == "active" && subscription.Active {
		return "active", true, 0, nil
	}

	// –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º grace period (30 –¥–Ω–µ–π)
	if subscription.Status == "cancelled" {
		if subscription.CancelledAt != nil {
			gracePeriodEnd := subscription.CancelledAt.AddDate(0, 0, 30)
			if time.Now().Before(gracePeriodEnd) {
				return "cancelled", true, 0, nil
			}
		}
		// Grace period –∏—Å—Ç–µ–∫, –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è
		remainingFree, err := ih.getRemainingFreeCreations(userID)
		if err != nil {
			return "cancelled", false, 0, err
		}
		return "cancelled", remainingFree > 0, remainingFree, nil
	}

	// –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –¥–∞–µ—Ç –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è
	remainingFree, err := ih.getRemainingFreeCreations(userID)
	if err != nil {
		return "expired", false, 0, err
	}
	return "expired", remainingFree > 0, remainingFree, nil
}

// getRemainingFreeCreations –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∏–π
func (ih *InlineHandler) getRemainingFreeCreations(userID int64) (int, error) {
	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏–∑ usage_stats
	usageThisMonth, err := ih.stateManager.db.GetUserUsageThisMonth(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∑–∞ –º–µ—Å—è—Ü: %v", err)
		return 0, err
	}

	// –ú–∞–∫—Å–∏–º—É–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∏–π –≤ –º–µ—Å—è—Ü - 5
	const maxFreePostsPerMonth = 5
	remaining := maxFreePostsPerMonth - usageThisMonth

	if remaining < 0 {
		remaining = 0
	}

	log.Printf("[DEBUG] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∑–∞ –º–µ—Å—è—Ü: %d, –æ—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö: %d", userID, usageThisMonth, remaining)

	return remaining, nil
}

// createSubscriptionKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
func (ih *InlineHandler) createSubscriptionKeyboard(userID int64, subscriptionStatus string, remainingFree int) tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton

	// –ö–Ω–æ–ø–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "buy_premium"),
	))

	// –ï—Å–ª–∏ –µ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
	if remainingFree > 0 {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üéÅ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", "create_post"),
		))
	}

	// –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
	))

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// handlePostHistory –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å—Ç–æ–≤
func (ih *InlineHandler) handlePostHistory(bot *Bot, callback *tgbotapi.CallbackQuery, page int) {
	userID := callback.From.ID
	const postsPerPage = 10
	offset := (page - 1) * postsPerPage

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å is_saved=TRUE
	posts, err := ih.postHistoryRepo.GetUserSavedPosts(userID, postsPerPage, offset)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å—Ç–æ–≤: %v", err)
		msg := tgbotapi.NewEditMessageText(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å—Ç–æ–≤",
		)
		bot.Send(msg)
		return
	}

	log.Printf("–ü–æ–ª—É—á–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: %d", len(posts))
	for i, post := range posts {
		log.Printf("–ü–æ—Å—Ç %d: ID=%d, AIResponse=%s", i+1, post.ID, post.AIResponse)
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
	totalPosts, err := ih.postHistoryRepo.GetUserSavedPostsCount(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤: %v", err)
	}

	var messageText string
	if len(posts) == 0 {
		messageText = "üìö –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å—Ç–æ–≤\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤."
	} else {
		messageText = fmt.Sprintf("üìö –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å—Ç–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ %d)\n\n", page)
		for i, post := range posts {
			postNumber := offset + i + 1
			// –û—á–∏—â–∞–µ–º HTML —Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞
			formatter := NewTelegramPostFormatter(DefaultPostStyling())
			cleanText, _ := formatter.ParseHTMLToEntities(post.AIResponse)

			// –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–µ–∑–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π UTF-8
			shortText := cleanText
			if len(shortText) > 30 {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–µ–∑–∞–Ω–∏–µ –Ω–µ –Ω–∞—Ä—É—à–∞–µ—Ç UTF-8
				runes := []rune(shortText)
				if len(runes) > 30 {
					shortText = string(runes[:30]) + "..."
				}
			}
			// –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
			shortText = strings.Map(func(r rune) rune {
				if r < 32 && r != '\n' && r != '\t' {
					return -1 // –£–¥–∞–ª—è–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã
				}
				return r
			}, shortText)
			messageText += fmt.Sprintf("%d. %s\n", postNumber, shortText)
		}
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	var keyboardRows [][]tgbotapi.InlineKeyboardButton

	// –ö–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏ –ø–æ—Å—Ç–æ–≤
	if len(posts) > 0 {
		var postButtons []tgbotapi.InlineKeyboardButton
		for i := range posts {
			postNumber := offset + i + 1
			postButtons = append(postButtons, tgbotapi.NewInlineKeyboardButtonData(
				fmt.Sprintf("%d", postNumber),
				fmt.Sprintf("view_post_%d", postNumber),
			))
		}
		// –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Ä—è–¥—ã –ø–æ 5
		for i := 0; i < len(postButtons); i += 5 {
			end := i + 5
			if end > len(postButtons) {
				end = len(postButtons)
			}
			keyboardRows = append(keyboardRows, postButtons[i:end])
		}
	}

	// –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
	if totalPosts > postsPerPage {
		var paginationRow []tgbotapi.InlineKeyboardButton

		if page > 1 {
			paginationRow = append(paginationRow, tgbotapi.NewInlineKeyboardButtonData(
				"‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
				fmt.Sprintf("post_history_%d", page-1),
			))
		}

		if offset+postsPerPage < totalPosts {
			paginationRow = append(paginationRow, tgbotapi.NewInlineKeyboardButtonData(
				"–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
				fmt.Sprintf("post_history_%d", page+1),
			))
		}

		if len(paginationRow) > 0 {
			keyboardRows = append(keyboardRows, paginationRow)
		}
	}

	// –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å
	keyboardRows = append(keyboardRows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", "profile"),
	))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(keyboardRows...)

	msg := tgbotapi.NewEditMessageText(callback.Message.Chat.ID, callback.Message.MessageID, messageText)
	msg.ReplyMarkup = &keyboard
	bot.Send(msg)
}

// handleViewPost –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
func (ih *InlineHandler) handleViewPost(bot *Bot, callback *tgbotapi.CallbackQuery, postNumber int) {
	userID := callback.From.ID
	const postsPerPage = 10

	// –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–∑–∏—Ü–∏—é –ø–æ—Å—Ç–∞
	page := ((postNumber - 1) / postsPerPage) + 1
	positionOnPage := (postNumber - 1) % postsPerPage
	offset := (page - 1) * postsPerPage

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	posts, err := ih.postHistoryRepo.GetUserSavedPosts(userID, postsPerPage, offset)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: %v", err)
		msg := tgbotapi.NewEditMessageText(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞",
		)
		bot.Send(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if positionOnPage >= len(posts) {
		msg := tgbotapi.NewEditMessageText(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			"‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
		)
		bot.Send(msg)
		return
	}

	post := posts[positionOnPage]

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞
	headerText := fmt.Sprintf("üìö –ü–æ—Å—Ç #%d\n\n", postNumber)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º HTML —Ä–∞–∑–º–µ—Ç–∫—É –≤ —Ç–µ–∫—Å—Ç–µ –ø–æ—Å—Ç–∞
	formatter := NewTelegramPostFormatter(DefaultPostStyling())
	cleanText, entities := formatter.ParseHTMLToEntities(post.AIResponse)

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ—á–∏—â–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
	fullText := headerText + cleanText

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –∫ –∏—Å—Ç–æ—Ä–∏–∏", fmt.Sprintf("post_history_%d", page)),
		),
	)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
	_, err = bot.SendFormattedMessageWithKeyboard(
		callback.Message.Chat.ID,
		fullText,
		entities,
		keyboard,
	)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
		msg := tgbotapi.NewEditMessageText(callback.Message.Chat.ID, callback.Message.MessageID, headerText+post.AIResponse)
		msg.ReplyMarkup = &keyboard
		bot.Send(msg)
	} else {
		// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–æ–≤–æ–µ
		deleteMsg := tgbotapi.NewDeleteMessage(callback.Message.Chat.ID, callback.Message.MessageID)
		bot.Send(deleteMsg)
	}
}

// handlePaymentHistory –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–ª–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (ih *InlineHandler) handlePaymentHistory(bot *Bot, callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID

	// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	subscriptions, err := ih.subscriptionService.GetUserPaymentHistory(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–ª–∞—Ç: %v", err)
		msg := tgbotapi.NewEditMessageText(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–ª–∞—Ç",
		)
		bot.Send(msg)
		return
	}

	var messageText string
	if len(subscriptions) == 0 {
		messageText = "üí∞ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π."
	} else {
		messageText = "üí∞ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç\n\n"
		for i, sub := range subscriptions {
			// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
			createdDate := sub.CreatedAt.Format("02.01.2006 15:04")

			// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
			var statusEmoji, statusText string
			switch sub.Status {
			case "active":
				statusEmoji = "‚úÖ"
				statusText = "–ê–∫—Ç–∏–≤–Ω–∞"
			case "pending":
				statusEmoji = "‚è≥"
				statusText = "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã"
			case "cancelled":
				statusEmoji = "‚ùå"
				statusText = "–û—Ç–º–µ–Ω–µ–Ω–∞"
			case "expired":
				statusEmoji = "‚è∞"
				statusText = "–ò—Å—Ç–µ–∫–ª–∞"
			case "suspended":
				statusEmoji = "üö´"
				statusText = "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
			default:
				statusEmoji = "‚ùì"
				statusText = sub.Status
			}

			// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É
			amountText := fmt.Sprintf("%.0f‚ÇΩ", sub.Amount)

			// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∞—Ä–∏—Ñ
			tariffText := sub.Tariff
			if tariffText == "" {
				tariffText = "–ù–µ —É–∫–∞–∑–∞–Ω"
			}

			messageText += fmt.Sprintf("%d. %s %s\n", i+1, statusEmoji, statusText)
			messageText += fmt.Sprintf("   üí∞ –°—É–º–º–∞: %s\n", amountText)
			messageText += fmt.Sprintf("   üìÖ –î–∞—Ç–∞: %s\n", createdDate)
			messageText += fmt.Sprintf("   üè∑Ô∏è –¢–∞—Ä–∏—Ñ: %s\n", tariffText)

			// –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
			if sub.Status == "active" && !sub.NextPayment.IsZero() {
				nextPay := sub.NextPayment.Format("02.01.2006")
				messageText += fmt.Sprintf("   ‚è∞ –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂: %s\n", nextPay)
			}
			if sub.CancelledAt != nil {
				cancelledDate := sub.CancelledAt.Format("02.01.2006")
				messageText += fmt.Sprintf("   üö´ –û—Ç–º–µ–Ω–µ–Ω–∞: %s\n", cancelledDate)
			}
			if sub.FailedAttempts > 0 {
				messageText += fmt.Sprintf("   ‚ö†Ô∏è –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: %d\n", sub.FailedAttempts)
			}

			messageText += "\n"
		}
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", "profile"),
		),
	)

	msg := tgbotapi.NewEditMessageText(callback.Message.Chat.ID, callback.Message.MessageID, messageText)
	msg.ReplyMarkup = &keyboard
	bot.Send(msg)
}

// shouldIncrementUsage –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ —Å—á–µ—Ç—á–∏–∫ –ù–ï –Ω—É–∂–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å (–µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ grace period)
func (ih *InlineHandler) shouldIncrementUsage(userID int64) (bool, error) {
	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	subscription, err := ih.subscriptionService.GetUserSubscription(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—á–µ—Ç—á–∏–∫–∞: %v", err)
		return false, err
	}

	// –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏, –Ω—É–∂–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å —Å—á–µ—Ç—á–∏–∫
	if subscription == nil {
		log.Printf("[DEBUG] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫", userID)
		return false, nil
	}

	log.Printf("[DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: status=%s, active=%v, cancelled_at=%v, next_payment=%v",
		userID, subscription.Status, subscription.Active, subscription.CancelledAt, subscription.NextPayment)

	// –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –ù–ï –Ω—É–∂–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å —Å—á–µ—Ç—á–∏–∫
	if subscription.Status == "active" && subscription.Active {
		log.Printf("[DEBUG] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - –ù–ï —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫", userID)
		return true, nil
	}

	// –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º grace period
	if subscription.Status == "cancelled" {
		if subscription.CancelledAt != nil {
			gracePeriodEnd := subscription.CancelledAt.AddDate(0, 0, 30)
			now := time.Now()

			// –ï—Å–ª–∏ grace period –∞–∫—Ç–∏–≤–µ–Ω –ò –ø–æ–¥–ø–∏—Å–∫–∞ –µ—â–µ –Ω–µ –∏—Å—Ç–µ–∫–ª–∞, –ù–ï –Ω—É–∂–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å —Å—á–µ—Ç—á–∏–∫
			if now.Before(gracePeriodEnd) && now.Before(subscription.NextPayment) {
				log.Printf("[DEBUG] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –∞–∫—Ç–∏–≤–Ω—ã–π grace period - –ù–ï —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫", userID)
				return true, nil
			} else {
				log.Printf("[DEBUG] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d grace period –∏—Å—Ç–µ–∫ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫", userID)
			}
		}
	}

	// –í–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –Ω—É–∂–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å —Å—á–µ—Ç—á–∏–∫
	log.Printf("[DEBUG] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ grace period - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫", userID)
	return false, nil
}

// safeIncrementUsage –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
func (ih *InlineHandler) safeIncrementUsage(userID int64) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
	shouldNotIncrement, err := ih.shouldIncrementUsage(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞: %v", err)
		// –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
		return ih.stateManager.IncrementUsage(userID)
	}

	if !shouldNotIncrement {
		// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ grace period
		return ih.stateManager.IncrementUsage(userID)
	} else {
		log.Printf("–°—á–µ—Ç—á–∏–∫ –Ω–µ —É–≤–µ–ª–∏—á–µ–Ω - —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ grace period")
		return nil
	}
}

// incrementUsageIfNeeded —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–º–µ–Ω—ã –ø—Ä—è–º—ã—Ö –≤—ã–∑–æ–≤–æ–≤ stateManager.IncrementUsage
func (ih *InlineHandler) incrementUsageIfNeeded(userID int64) {
	err := ih.safeIncrementUsage(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞: %v", err)
	}
}

// handleRewritePostStart –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ—Ä–∞–π—Ç–∞ –ø–æ—Å—Ç–∞
func (ih *InlineHandler) handleRewritePostStart(bot *Bot, callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–∞–∫ –∂–µ –∫–∞–∫ –≤ handleCreatePost)
	subscriptionStatus, canCreate, remainingFree, err := ih.checkUserSubscriptionStatus(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞: %v", err)
		// –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
		subscriptionStatus = "error"
		canCreate = true
	}

	if canCreate {
		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞
		ih.stateManager.SetWaitingForPostText(userID, true)
		ih.stateManager.UpdateStep(userID, "waiting_for_post_text")

		msg := tgbotapi.NewEditMessageText(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			"üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å:\n\n"+
				"–ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —á–∞—Ç, –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å—Ç–æ–º.",
		)

		bot.Send(msg)
	} else {
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ñ–æ—Ä–º–∏—Ç—å
		keyboard := ih.createSubscriptionKeyboard(userID, subscriptionStatus, remainingFree)

		var messageText string
		switch subscriptionStatus {
		case "cancelled":
			messageText = "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
		case "expired":
			messageText = "‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫.\n\n"
		case "no_subscription":
			messageText = "üíé –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
		default:
			messageText = "üíé –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞.\n\n"
		}

		if remainingFree > 0 {
			messageText += fmt.Sprintf("üéÅ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å %d –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∏–π –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.\n\n", remainingFree)
		} else {
			messageText += "üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.\n\n"
		}

		messageText += "üí≥ –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞!"

		msg := tgbotapi.NewEditMessageText(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			messageText,
		)
		msg.ReplyMarkup = &keyboard

		bot.Send(msg)
	}
}

// handleRewritePostDirect –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä—è–º–æ–π —Ä–µ—Ä–∞–π—Ç –ø–æ—Å—Ç–∞ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É–∫–∞–∑–∞–Ω–∏–π
func (ih *InlineHandler) handleRewritePostDirect(bot *Bot, callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID
	state := ih.stateManager.GetState(userID)

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞
	originalText := ih.stateManager.GetRewritingPost(userID)
	if originalText == "" {
		msg := tgbotapi.NewEditMessageText(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			"‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
		)
		bot.Send(msg)
		return
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ—Ä–∞–π—Ç–∞
	ih.stateManager.SetRewriteMode(userID, "direct")

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
	msg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		"‚è≥ –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞—é –ø–æ—Å—Ç...",
	)
	bot.Send(msg)

	// –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ—Ä–∞–π—Ç —á–µ—Ä–µ–∑ DeepSeek
	rewrittenText, err := ih.voiceHandler.GenerateContent("rewrite_post", originalText, userID, 0)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Ä–µ—Ä–∞–π—Ç–∞ –ø–æ—Å—Ç–∞: %v", err)
		msg := tgbotapi.NewMessage(
			callback.Message.Chat.ID,
			"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
		)
		bot.Send(msg)
		return
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	formatter := NewTelegramPostFormatter(state.PostStyling)
	cleanText, entities := formatter.FormatPost(rewrittenText)

	// –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç
	post := Post{
		ContentType: "telegram_post",
		Content:     cleanText,
		Messages:    []string{originalText},
		Entities:    entities,
		Styling:     state.PostStyling,
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç
	ih.stateManager.SetCurrentPost(userID, &post)
	ih.stateManager.SetApprovalStatus(userID, "pending")

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è
	keyboard := bot.CreateApprovalKeyboard()
	messageID, err := bot.SendFormattedMessageWithKeyboard(
		callback.Message.Chat.ID,
		cleanText,
		entities,
		keyboard,
	)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
		resultMsg := tgbotapi.NewMessage(callback.Message.Chat.ID, cleanText)
		resultMsg.ReplyMarkup = keyboard
		bot.Send(resultMsg)
	} else {
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥–æ—Ç–æ–≤—ã–º –ø–æ—Å—Ç–æ–º
		ih.stateManager.SetPostMessageID(userID, messageID)
		log.Printf("–°–æ—Ö—Ä–∞–Ω–∏–ª–∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ—Ä–∞–π—Ç–æ–º: %d", messageID)
	}

	// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ—Ä–∞–π—Ç–∞
	ih.stateManager.ClearRewriteState(userID)
}

// handleRewritePostVoice –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—Ä–∞–π—Ç –ø–æ—Å—Ç–∞ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —É–∫–∞–∑–∞–Ω–∏—è–º–∏
func (ih *InlineHandler) handleRewritePostVoice(bot *Bot, callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞
	originalText := ih.stateManager.GetRewritingPost(userID)
	if originalText == "" {
		msg := tgbotapi.NewEditMessageText(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			"‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
		)
		bot.Send(msg)
		return
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ—Ä–∞–π—Ç–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	ih.stateManager.SetRewriteMode(userID, "voice")
	ih.stateManager.UpdateStep(userID, "waiting_for_voice")
	ih.stateManager.SetWaitingForVoice(userID, true)
	ih.stateManager.ClearVoiceMessages(userID)
	ih.stateManager.ClearPendingVoices(userID)

	msg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		"üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–∏—è–º–∏, –∫–∞–∫ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç:\n\n"+
			"–ò—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Å—Ç:\n"+originalText+"\n\n"+
			"–ì–æ–≤–æ—Ä–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å, –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å.",
	)

	bot.Send(msg)
}
