package bot

import (
	"ai_tg_writer/internal/infrastructure/database"
	"ai_tg_writer/internal/service"
	"fmt"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// Bot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –æ–±–µ—Ä—Ç–∫—É –Ω–∞–¥ tgbotapi.BotAPI —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
type Bot struct {
	API                 *tgbotapi.BotAPI
	StateManager        *StateManager
	DB                  *database.DB
	SubscriptionService *service.SubscriptionService
}

func NewBot(api *tgbotapi.BotAPI, db *database.DB) *Bot {
	return &Bot{
		API: api,
		DB:  db,
	}
}

func NewBotWithSubscriptionService(api *tgbotapi.BotAPI, db *database.DB, subscriptionService *service.SubscriptionService) *Bot {
	return &Bot{
		API:                 api,
		DB:                  db,
		SubscriptionService: subscriptionService,
	}
}

// Send –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API –±–æ—Ç–∞
func (b *Bot) Send(c tgbotapi.Chattable) (tgbotapi.Message, error) {
	return b.API.Send(c)
}

// CreateApprovalKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
func (b *Bot) CreateApprovalKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", "approve"),
			tgbotapi.NewInlineKeyboardButtonData("‚úèÔ∏è –í–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏", "edit_post"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
		),
	)
}

// CreateEditApprovalKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –ø—Ä–∞–≤–æ–∫
func (b *Bot) CreateEditApprovalKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úèÔ∏è –í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è", "edit_post"),
			tgbotapi.NewInlineKeyboardButtonData("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç", "save_post"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
		),
	)
}

// CreateContinueKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∫—Ç–æ–≤–∫–∏
func (b *Bot) CreateContinueKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úçÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∫—Ç–æ–≤–∫—É", "continue_dictation"),
			tgbotapi.NewInlineKeyboardButtonData("üöÄ –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", "start_creation"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
		),
	)
}

// CreateEditContinueKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–∞–≤–æ–∫
func (b *Bot) CreateEditContinueKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∫–∏", "continue_dictation"),
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", "edit_start_creation"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
		),
	)
}

// CreateMainKeyboard —Å–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø—Ä–æ–±–µ–ª–æ–º-–∑–∞–≥–ª—É—à–∫–æ–π
func (b *Bot) CreateMainKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç/—Å—Ü–µ–Ω–∞—Ä–∏–π", "create_post"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "profile"),
			tgbotapi.NewInlineKeyboardButtonData("üíé –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", "subscription"),
		),
		tgbotapi.NewInlineKeyboardRow(
			// tgbotapi.NewInlineKeyboardButtonData("üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏", "styling_settings"),
			tgbotapi.NewInlineKeyboardButtonData("‚ùì –ü–æ–º–æ—â—å", "help"),
		),
		// tgbotapi.NewInlineKeyboardRow(
		// 	tgbotapi.NewInlineKeyboardButtonData("üß™ –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "test_formatting"),
		// ),
	)
}

// CreateContentTypeKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
func (b *Bot) CreateContentTypeKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –≤ –¢–µ–ª–µ–≥—Ä–∞–º", "create_telegram_post"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –°–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –≤–∏–¥–µ–æ –Ω–∞ YouTube", "create_script_youtube"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –°–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è Reels –≤ Instagram", "create_script_reels"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –≤ Instagram", "create_post_instagram"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
		),
	)
}

// CreatePostActionKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –ø–æ—Å—Ç–∞
func (b *Bot) CreatePostActionKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "edit_post"),
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", "save_post"),
		),
	)
}

// SendFormattedMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
func (b *Bot) SendFormattedMessage(chatID int64, text string, entities []MessageEntity) (int, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
	if len(text) > 3900 {
		return b.sendSplitFormattedMessage(chatID, text, entities)
	}

	msg := tgbotapi.NewMessage(chatID, text)

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ entities –≤ —Ñ–æ—Ä–º–∞—Ç tgbotapi
	var tgbotEntities []tgbotapi.MessageEntity
	for _, entity := range entities {
		tgbotEntity := tgbotapi.MessageEntity{
			Type:   entity.Type,
			Offset: entity.Offset,
			Length: entity.Length,
		}

		if entity.URL != "" {
			tgbotEntity.URL = entity.URL
		}

		if entity.User != nil {
			tgbotEntity.User = &tgbotapi.User{
				ID:           entity.User.ID,
				IsBot:        entity.User.IsBot,
				FirstName:    entity.User.FirstName,
				LastName:     entity.User.LastName,
				UserName:     entity.User.Username,
				LanguageCode: entity.User.LanguageCode,
			}
		}

		if entity.Language != "" {
			tgbotEntity.Language = entity.Language
		}

		tgbotEntities = append(tgbotEntities, tgbotEntity)
	}

	msg.Entities = tgbotEntities

	message, err := b.Send(msg)
	if err != nil {
		// –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –¥–ª–∏–Ω–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–±–∏—Ç—å –Ω–∞ —á–∞—Å—Ç–∏
		if err.Error() == "Bad Request: message is too long" {
			return b.sendSplitFormattedMessage(chatID, text, entities)
		}
		return 0, err
	}
	return message.MessageID, nil
}

// SendFormattedMessageWithKeyboard –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
func (b *Bot) SendFormattedMessageWithKeyboard(chatID int64, text string, entities []MessageEntity, keyboard tgbotapi.InlineKeyboardMarkup) (int, error) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboard

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ entities –≤ —Ñ–æ—Ä–º–∞—Ç tgbotapi
	var tgbotEntities []tgbotapi.MessageEntity
	for _, entity := range entities {
		tgbotEntity := tgbotapi.MessageEntity{
			Type:   entity.Type,
			Offset: entity.Offset,
			Length: entity.Length,
		}

		if entity.URL != "" {
			tgbotEntity.URL = entity.URL
		}

		if entity.User != nil {
			tgbotEntity.User = &tgbotapi.User{
				ID:           entity.User.ID,
				IsBot:        entity.User.IsBot,
				FirstName:    entity.User.FirstName,
				LastName:     entity.User.LastName,
				UserName:     entity.User.Username,
				LanguageCode: entity.User.LanguageCode,
			}
		}

		if entity.Language != "" {
			tgbotEntity.Language = entity.Language
		}

		tgbotEntities = append(tgbotEntities, tgbotEntity)
	}

	msg.Entities = tgbotEntities

	message, err := b.Send(msg)
	if err != nil {
		return 0, err
	}
	return message.MessageID, nil
}

// CreateStylingSettingsKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
func (b *Bot) CreateStylingSettingsKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üî§ –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç", "toggle_bold"),
			tgbotapi.NewInlineKeyboardButtonData("üìù –ö—É—Ä—Å–∏–≤", "toggle_italic"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –ó–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ", "toggle_strikethrough"),
			tgbotapi.NewInlineKeyboardButtonData("üíª –ö–æ–¥", "toggle_code"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîó –°—Å—ã–ª–∫–∏", "toggle_links"),
			tgbotapi.NewInlineKeyboardButtonData("# –•–µ—à—Ç–µ–≥–∏", "toggle_hashtags"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("@ –£–ø–æ–º–∏–Ω–∞–Ω–∏—è", "toggle_mentions"),
			tgbotapi.NewInlineKeyboardButtonData("üìã –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ", "toggle_underline"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üì¶ –ë–ª–æ–∫–∏ –∫–æ–¥–∞", "toggle_pre"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
		),
	)
}

// sendSplitFormattedMessage —Ä–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö
func (b *Bot) sendSplitFormattedMessage(chatID int64, text string, entities []MessageEntity) (int, error) {
	// –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 3800 —Å–∏–º–≤–æ–ª–æ–≤ (–º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞ Telegram –≤ 4096)
	parts := splitText(text, 3800)
	var lastMessageID int

	for i, part := range parts {
		// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
		msg := tgbotapi.NewMessage(chatID, part)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–±–∏—Ç—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
		message, err := b.Send(msg)
		if err != nil {
			return 0, err
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
		lastMessageID = message.MessageID

		// –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
		if i < len(parts)-1 {
			continueMsg := tgbotapi.NewMessage(chatID, "‚è© –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç...")
			_, err := b.Send(continueMsg)
			if err != nil {
				return 0, err
			}
		}
	}

	return lastMessageID, nil
}

// splitText —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
func splitText(text string, maxLength int) []string {
	var parts []string
	runes := []rune(text)

	for len(runes) > 0 {
		if len(runes) <= maxLength {
			parts = append(parts, string(runes))
			break
		}

		// –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –ø–æ –∞–±–∑–∞—Ü–∞–º)
		splitIndex := findSplitIndex(runes, maxLength)
		parts = append(parts, string(runes[:splitIndex]))
		runes = runes[splitIndex:]
	}

	return parts
}

// findSplitIndex –Ω–∞—Ö–æ–¥–∏—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞
func findSplitIndex(runes []rune, maxLength int) int {
	if len(runes) <= maxLength {
		return len(runes)
	}

	// –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–Ω–µ—Ü –∞–±–∑–∞—Ü–∞
	for i := maxLength; i > maxLength-100 && i > 0; i-- {
		if runes[i] == '\n' && (i+1 >= len(runes) || runes[i+1] == '\n') {
			return i + 1
		}
	}

	// –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–Ω–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
	for i := maxLength; i > maxLength-50 && i > 0; i-- {
		if runes[i] == '.' || runes[i] == '!' || runes[i] == '?' {
			if i+1 < len(runes) && runes[i+1] == ' ' {
				return i + 2
			}
			return i + 1
		}
	}

	// –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ö–æ—Ä–æ—à–µ–µ –º–µ—Å—Ç–æ, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–µ
	return maxLength
}

// SendHTMLMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—è –µ–µ –≤ Telegram Entities
func (b *Bot) SendHTMLMessage(chatID int64, htmlText string) (int, error) {
	// –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	formatter := NewTelegramPostFormatter(DefaultPostStyling())
	cleanText, entities := formatter.ParseHTMLToEntities(htmlText)
	return b.SendFormattedMessage(chatID, cleanText, entities)
}

// CreateSubscriptionLink —Å–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏
func (b *Bot) CreateSubscriptionLink(userID int64, tariff string, amount float64) (string, error) {
	if b.SubscriptionService == nil {
		return "", fmt.Errorf("subscription service not initialized")
	}

	return b.SubscriptionService.CreateSubscriptionLink(userID, tariff, amount)
}
