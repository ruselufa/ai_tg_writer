package service

import (
	"ai_tg_writer/internal/config"
	"ai_tg_writer/internal/domain"
	"ai_tg_writer/internal/infrastructure/yookassa"
	"fmt"
	"log"
	"os"
	"strconv"
	"time"
)

type SubscriptionService struct {
	repo   domain.SubscriptionRepository
	yk     *yookassa.Client
	config *config.Config
	bot    interface {
		SendPaymentFailedMessage(userID int64, attempt int) error
		SendSubscriptionSuspendedMessage(userID int64) error
	} // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
}

func NewSubscriptionService(repo domain.SubscriptionRepository, ykClient *yookassa.Client, cfg *config.Config) *SubscriptionService {
	return &SubscriptionService{
		repo:   repo,
		yk:     ykClient,
		config: cfg,
		bot:    nil, // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–∑–∂–µ
	}
}

// NewSubscriptionServiceWithBot —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Ä–≤–∏—Å —Å –±–æ—Ç–æ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
func NewSubscriptionServiceWithBot(repo domain.SubscriptionRepository, ykClient *yookassa.Client, cfg *config.Config, bot interface {
	SendPaymentFailedMessage(userID int64, attempt int) error
	SendSubscriptionSuspendedMessage(userID int64) error
}) *SubscriptionService {
	return &SubscriptionService{
		repo:   repo,
		yk:     ykClient,
		config: cfg,
		bot:    bot,
	}
}

// CreateSubscription —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
func (s *SubscriptionService) CreateSubscription(userID int64, tariff string, amount float64) (*domain.Subscription, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
	existing, err := s.repo.GetByUserID(userID)
	if err != nil {
		return nil, fmt.Errorf("error checking existing subscription: %w", err)
	}

	if existing != nil && existing.Active {
		return nil, fmt.Errorf("user already has active subscription")
	}

	// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	subscription := &domain.Subscription{
		UserID:         userID,
		SubscriptionID: nil, // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è YooKassa (—Ç–æ–ª—å–∫–æ –¥–ª—è Prodamus)
		Tariff:         tariff,
		Status:         string(domain.SubscriptionStatusPending),
		Amount:         amount,
		NextPayment:    time.Now().UTC().Add(s.config.SubscriptionInterval), // –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC –≤—Ä–µ–º—è
		LastPayment:    time.Now().UTC(),                                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC –≤—Ä–µ–º—è
		Active:         false,                                               // –°—Ç–∞–Ω–µ—Ç true –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
	}

	if err := s.repo.Create(subscription); err != nil {
		return nil, fmt.Errorf("error creating subscription: %w", err)
	}

	return subscription, nil
}

// GetUserSubscription –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (s *SubscriptionService) GetUserSubscription(userID int64) (*domain.Subscription, error) {
	return s.repo.GetByUserID(userID)
}

// CancelSubscription –æ—Ç–º–µ–Ω—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É
func (s *SubscriptionService) CancelSubscription(userID int64) error {
	log.Printf("üîÑ Starting subscription cancellation for user %d", userID)

	subscription, err := s.repo.GetByUserID(userID)
	if err != nil {
		log.Printf("‚ùå Error getting subscription for user %d: %v", userID, err)
		return fmt.Errorf("error getting subscription: %w", err)
	}

	if subscription == nil {
		log.Printf("‚ùå Subscription not found for user %d", userID)
		return fmt.Errorf("subscription not found")
	}

	log.Printf("‚úÖ Found subscription for user %d: ID=%d, Status=%s, Active=%v",
		userID, subscription.ID, subscription.Status, subscription.Active)

	// –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Prodamus
	// TODO: –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –Ω–æ–≤—ã–º –ø–ª–∞—Ç–µ–∂–Ω—ã–º –º–æ–¥—É–ª–µ–º
	// if err := s.prodamusHandler.SetSubscriptionActivity(subscription.SubscriptionID, userID, false); err != nil {
	// 	return fmt.Errorf("error cancelling subscription in Prodamus: %w", err)
	// }

	// –û—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–≤–∫–ª—é—á–∞—è –æ—á–∏—Å—Ç–∫—É –ø–æ–ª–µ–π –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫)
	log.Printf("üîÑ Cancelling subscription in database for user %d", userID)
	if err := s.repo.Cancel(userID); err != nil {
		log.Printf("‚ùå Error cancelling subscription in database for user %d: %v", userID, err)
		return fmt.Errorf("error cancelling subscription in database: %w", err)
	}

	log.Printf("‚úÖ Subscription cancelled successfully for user %d", userID)
	return nil
}

// ProcessPayment –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
func (s *SubscriptionService) ProcessPayment(userID int64, amount float64) error {
	// –ò—â–µ–º –ª—é–±—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é pending)
	subscription, err := s.repo.GetAnyByUserID(userID)
	if err != nil {
		return fmt.Errorf("error getting subscription: %w", err)
	}

	if subscription == nil {
		return fmt.Errorf("subscription not found")
	}

	log.Printf("üìù Activating subscription for user %d: ID=%d, Status=%s, Active=%v",
		userID, subscription.ID, subscription.Status, subscription.Active)

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –¥–∞—Ç—ã
	subscription.Status = string(domain.SubscriptionStatusActive)
	subscription.LastPayment = time.Now().UTC()                                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC –≤—Ä–µ–º—è
	subscription.NextPayment = time.Now().UTC().Add(s.config.SubscriptionInterval) // –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC –≤—Ä–µ–º—è
	subscription.Active = true                                                     // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É

	if err := s.repo.Update(subscription); err != nil {
		return fmt.Errorf("error updating subscription: %w", err)
	}

	log.Printf("‚úÖ Subscription activated successfully for user %d", userID)
	return nil
}

// IsUserSubscribed –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
func (s *SubscriptionService) IsUserSubscribed(userID int64) (bool, error) {
	subscription, err := s.repo.GetByUserID(userID)
	if err != nil {
		return false, fmt.Errorf("error checking subscription: %w", err)
	}

	return subscription != nil && subscription.Active && subscription.Status == string(domain.SubscriptionStatusActive), nil
}

// GetUserTariff –ø–æ–ª—É—á–∞–µ—Ç —Ç–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (s *SubscriptionService) GetUserTariff(userID int64) (string, error) {
	subscription, err := s.repo.GetByUserID(userID)
	if err != nil {
		return "", fmt.Errorf("error getting subscription: %w", err)
	}

	if subscription == nil || !subscription.Active {
		return "free", nil
	}

	return subscription.Tariff, nil
}

// CreateSubscriptionLink —Å–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
func (s *SubscriptionService) CreateSubscriptionLink(userID int64, tariff string, amount float64) (string, error) {
	log.Printf("=== CreateSubscriptionLink START ===")
	log.Printf("UserID: %d, Tariff: %s, Amount: %.2f", userID, tariff, amount)

	// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ë–î (pending)
	sub, err := s.repo.GetByUserID(userID)
	if err != nil {
		log.Printf("‚ùå Error getting subscription: %v", err)
		return "", fmt.Errorf("get subscription: %w", err)
	}
	log.Printf("‚úÖ Subscription check passed, sub=%v", sub != nil)

	if sub == nil {
		log.Printf("üìù Creating new subscription...")
		if _, err := s.CreateSubscription(userID, tariff, amount); err != nil {
			log.Printf("‚ùå Error creating subscription: %v", err)
			return "", err
		}
		log.Printf("‚úÖ Subscription created successfully")
	}

	if s.yk == nil {
		log.Printf("‚ùå YooKassa client is nil")
		return "", fmt.Errorf("yookassa client is not configured")
	}
	log.Printf("‚úÖ YooKassa client is configured")

	// –§–æ—Ä–º–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –º–µ—Ç–æ–¥–∞
	value := fmt.Sprintf("%.2f", amount)
	idem := fmt.Sprintf("%d-%d", userID, time.Now().UTC().UnixNano()) // –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC –≤—Ä–µ–º—è
	returnURL := getenv("YK_RETURN_URL_ADDRESS", "")

	log.Printf("üí≥ Calling YooKassa CreateInitialPayment...")
	log.Printf("   Value: %s, IdempotenceKey: %s", value, idem)
	log.Printf("   ReturnURL: %s", returnURL)
	log.Printf("   CustomerID: %s", strconv.FormatInt(userID, 10))

	payment, err := s.yk.CreateInitialPayment(
		idem,
		yookassa.Amount{Value: value, Currency: "RUB"},
		"–ü–æ–¥–ø–∏—Å–∫–∞ AI TG Writer",
		strconv.FormatInt(userID, 10),
		returnURL,
		map[string]string{"tg_user_id": strconv.FormatInt(userID, 10)},
	)
	if err != nil {
		log.Printf("‚ùå YooKassa CreateInitialPayment error: %v", err)
		return "", fmt.Errorf("create initial payment: %w", err)
	}
	log.Printf("‚úÖ YooKassa CreateInitialPayment success")

	// –õ–æ–≥–∏—Ä—É–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç –æ—Ç YooKassa –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	log.Printf("=== YooKassa CreateInitialPayment Response ===")
	log.Printf("UserID: %d, Amount: %s, IdempotenceKey: %s", userID, value, idem)
	log.Printf("Full response: %+v", payment)

	// –í—ã–≤–æ–¥–∏–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
	if id, ok := payment["id"].(string); ok {
		log.Printf("Payment ID: %s", id)
	}
	if status, ok := payment["status"].(string); ok {
		log.Printf("Payment Status: %s", status)
	}
	if conf, ok := payment["confirmation"].(map[string]any); ok {
		log.Printf("Confirmation: %+v", conf)
		if confURL, ok := conf["confirmation_url"].(string); ok {
			log.Printf("Confirmation URL: %s", confURL)
		}
	}
	log.Printf("=== End YooKassa Response ===")

	// –î–æ—Å—Ç–∞–µ–º confirmation_url –∏–∑ –æ—Ç–≤–µ—Ç–∞
	conf, ok := payment["confirmation"].(map[string]any)
	if !ok {
		return "", fmt.Errorf("confirmation not found in response")
	}
	url, _ := conf["confirmation_url"].(string)
	if url == "" {
		return "", fmt.Errorf("confirmation_url not found")
	}
	return url, nil
}

// SaveYooKassaBindingAndActivate —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç customer/payment_method –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É
func (s *SubscriptionService) SaveYooKassaBindingAndActivate(userID int64, customerID, paymentMethodID, paymentID string, amount float64) error {
	if err := s.repo.UpdateYooKassaBindings(userID, customerID, paymentMethodID, paymentID); err != nil {
		return fmt.Errorf("update bindings: %w", err)
	}
	return s.ProcessPayment(userID, amount)
}

// small helper for env with default
func getenv(key, def string) string {
	if v := os.Getenv(key); v != "" {
		return v
	}
	return def
}

// GetSubscriptionsDueForRenewal –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–ª–∏—Ç—å
func (s *SubscriptionService) GetSubscriptionsDueForRenewal() ([]*domain.Subscription, error) {
	return s.repo.GetSubscriptionsDueForRenewal()
}

// ProcessRecurringPayment –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
func (s *SubscriptionService) ProcessRecurringPayment(subscription *domain.Subscription) error {
	if subscription.YKCustomerID == nil || subscription.YKPaymentMethodID == nil {
		return fmt.Errorf("missing YooKassa binding data")
	}

	log.Printf("üîÑ Processing recurring payment for user %d, subscription ID %d",
		subscription.UserID, subscription.ID)

	// –°–æ–∑–¥–∞–µ–º –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–π –∫–ª—é—á
	idempotenceKey := fmt.Sprintf("%d-recurring-%d", subscription.UserID, time.Now().UTC().Unix()) // –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC –≤—Ä–µ–º—è

	// –°–æ–∑–¥–∞–µ–º —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂
	payment, err := s.yk.CreateRecurringPayment(
		idempotenceKey,
		yookassa.Amount{
			Value:    fmt.Sprintf("%.2f", subscription.Amount),
			Currency: "RUB",
		},
		"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ AI TG Writer",
		*subscription.YKCustomerID,
		*subscription.YKPaymentMethodID,
		map[string]string{
			"tg_user_id":      fmt.Sprintf("%d", subscription.UserID),
			"subscription_id": fmt.Sprintf("%d", subscription.ID),
			"type":            "recurring",
		},
	)

	if err != nil {
		log.Printf("‚ùå Recurring payment failed for user %d: %v", subscription.UserID, err)
		return s.handlePaymentFailure(subscription)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
	status, ok := payment["status"].(string)
	if !ok || status == "canceled" {
		log.Printf("‚ùå Recurring payment canceled for user %d, status: %s", subscription.UserID, status)
		return s.handlePaymentFailure(subscription)
	}

	log.Printf("‚úÖ Recurring payment created for user %d: %s, status: %s", subscription.UserID, payment["id"], status)

	// –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω—ã–π, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
	if status == "succeeded" {
		log.Printf("‚úÖ Payment succeeded for user %d, resetting failure counters and restoring subscription", subscription.UserID)

		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
		subscription.FailedAttempts = 0
		subscription.NextRetry = nil
		subscription.SuspendedAt = nil
		subscription.Active = true
		subscription.Status = "active"

		// –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
		subscription.LastPayment = time.Now().UTC()
		subscription.NextPayment = time.Now().UTC().Add(s.config.SubscriptionInterval)

		// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑–µ
		if err := s.repo.Update(subscription); err != nil {
			log.Printf("‚ùå Failed to update subscription after successful payment: %v", err)
			return err
		}

		log.Printf("‚úÖ Subscription restored for user %d after successful payment", subscription.UserID)
		return nil
	}

	// –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ —É—Å–ø–µ—à–Ω—ã–π, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á—É
	return s.handlePaymentFailure(subscription)
}

// GetAvailableTariffs –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã
func (s *SubscriptionService) GetAvailableTariffs() []domain.Tariff {
	return []domain.Tariff{
		{
			ID:          "premium",
			Name:        "Premium",
			Price:       990.0,
			Period:      "month",
			Description: "–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ —Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏",
			Features: []string{
				"–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤",
				"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
				"–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
				"–î–æ—Å—Ç—É–ø –∫ –Ω–æ–≤—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º",
			},
		},
	}
}

// handlePaymentFailure –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –æ–ø–ª–∞—Ç—ã
func (s *SubscriptionService) handlePaymentFailure(subscription *domain.Subscription) error {
	log.Printf("üîÑ Handling payment failure for user %d, attempt %d", subscription.UserID, subscription.FailedAttempts+1)

	// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
	subscription.FailedAttempts++

	if subscription.FailedAttempts >= 3 {
		// –ü–æ—Å–ª–µ 3 –Ω–µ—É–¥–∞—á –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
		log.Printf("‚ùå Suspending subscription for user %d after 3 failed attempts", subscription.UserID)
		if err := s.repo.SuspendSubscription(subscription.UserID); err != nil {
			return fmt.Errorf("failed to suspend subscription: %w", err)
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–µ
		s.sendSubscriptionSuspendedMessage(subscription.UserID)
		return nil
	}

	// –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ–ø—ã—Ç–∫—É
	var retryInterval time.Duration
	if s.config.IsDevMode() {
		retryInterval = 1 * time.Minute // –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	} else {
		retryInterval = 1 * time.Hour // –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
	}

	nextRetry := time.Now().UTC().Add(retryInterval) // –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC –≤—Ä–µ–º—è
	subscription.NextRetry = &nextRetry

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –û–î–ò–ù –†–ê–ó —Å–æ –≤—Å–µ–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
	if err := s.repo.Update(subscription); err != nil {
		log.Printf("‚ùå Failed to update subscription after payment failure: %v", err)
		return fmt.Errorf("failed to update subscription: %w", err)
	}

	log.Printf("‚è∞ Next retry scheduled for user %d at %s (attempt %d)",
		subscription.UserID, nextRetry.Format("15:04:05"), subscription.FailedAttempts)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ
	s.sendPaymentFailedMessage(subscription.UserID, subscription.FailedAttempts)
	return nil
}

// GetSubscriptionsDueForRetry –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã
func (s *SubscriptionService) GetSubscriptionsDueForRetry() ([]*domain.Subscription, error) {
	return s.repo.GetSubscriptionsDueForRetry()
}

// GetAllActiveSubscriptions –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
func (s *SubscriptionService) GetAllActiveSubscriptions() ([]*domain.Subscription, error) {
	return s.repo.GetAllActiveSubscriptions()
}

// RetryPayment –ø—ã—Ç–∞–µ—Ç—Å—è —Å–ø–∏—Å–∞—Ç—å –¥–µ–Ω—å–≥–∏ —Å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
func (s *SubscriptionService) RetryPayment(userID int64) error {
	subscription, err := s.repo.GetByUserID(userID)
	if err != nil {
		return fmt.Errorf("error getting subscription: %w", err)
	}

	if subscription == nil {
		return fmt.Errorf("subscription not found")
	}

	if subscription.FailedAttempts >= 2 {
		return fmt.Errorf("subscription is suspended after 3 failed attempts")
	}

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á –∏ –≤—Ä–µ–º—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
	subscription.FailedAttempts = 0
	subscription.NextRetry = nil

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
	if err := s.repo.Update(subscription); err != nil {
		return fmt.Errorf("failed to update subscription: %w", err)
	}

	// –ü—ã—Ç–∞–µ–º—Å—è —Å–ø–∏—Å–∞—Ç—å –¥–µ–Ω—å–≥–∏
	return s.ProcessRecurringPayment(subscription)
}

// ChangePaymentMethod —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å –Ω–æ–≤—ã–º –º–µ—Ç–æ–¥–æ–º
func (s *SubscriptionService) ChangePaymentMethod(userID int64) (string, error) {
	subscription, err := s.repo.GetByUserID(userID)
	if err != nil {
		return "", fmt.Errorf("error getting subscription: %w", err)
	}

	if subscription == nil {
		return "", fmt.Errorf("subscription not found")
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
	return s.CreateSubscriptionLink(userID, subscription.Tariff, subscription.Amount)
}

// sendPaymentFailedMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ –æ–ø–ª–∞—Ç—ã
func (s *SubscriptionService) sendPaymentFailedMessage(userID int64, attempt int) {
	if s.bot != nil {
		if err := s.bot.SendPaymentFailedMessage(userID, attempt); err != nil {
			log.Printf("‚ùå Failed to send payment failed message to user %d: %v", userID, err)
		} else {
			log.Printf("üì® Payment failed message sent to user %d (attempt %d)", userID, attempt)
		}
	} else {
		log.Printf("üì® Should send payment failed message to user %d (attempt %d) - bot not configured", userID, attempt)
	}
}

// sendSubscriptionSuspendedMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏
func (s *SubscriptionService) sendSubscriptionSuspendedMessage(userID int64) {
	if s.bot != nil {
		if err := s.bot.SendSubscriptionSuspendedMessage(userID); err != nil {
			log.Printf("‚ùå Failed to send subscription suspended message to user %d: %v", userID, err)
		} else {
			log.Printf("üì® Subscription suspended message sent to user %d", userID)
		}
	} else {
		log.Printf("üì® Should send subscription suspended message to user %d - bot not configured", userID)
	}
}
