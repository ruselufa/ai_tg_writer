package worker

import (
	"ai_tg_writer/internal/config"
	"ai_tg_writer/internal/service"
	"context"
	"log"
	"sync"
	"sync/atomic"
	"time"

	"ai_tg_writer/internal/domain"
)

type SubscriptionWorker struct {
	subscriptionService *service.SubscriptionService
	config              *config.Config
}

// NewSubscriptionWorker —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
func NewSubscriptionWorker(subscriptionService *service.SubscriptionService, config *config.Config) *SubscriptionWorker {
	return &SubscriptionWorker{
		subscriptionService: subscriptionService,
		config:              config,
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–æ—Ä–∫–µ—Ä –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ
func (w *SubscriptionWorker) Start(ctx context.Context) {
	// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ YooKassa
	go w.monitorYooKassaPerformance()

	go w.run(ctx)
}

// monitorYooKassaPerformance –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å YooKassa
func (w *SubscriptionWorker) monitorYooKassaPerformance() {
	ticker := time.NewTicker(5 * time.Minute) // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
	defer ticker.Stop()

	for range ticker.C {
		log.Printf("üí≥ [YooKassa Monitor] –í–æ—Ä–∫–µ—Ä –ø–æ–¥–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç")
	}
}

// run –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–æ—Ä–∫–µ—Ä–∞
func (w *SubscriptionWorker) run(ctx context.Context) {
	if w.config.IsDevMode() {
		log.Printf("üîÑ Starting subscription worker in DEV mode (check every %s, renew every %s)",
			w.config.WorkerCheckInterval, w.config.SubscriptionInterval)
	} else {
		log.Printf("üîÑ Starting subscription worker in PRODUCTION mode (check every %s, renew every %s)",
			w.config.WorkerCheckInterval, w.config.SubscriptionInterval)
	}

	ticker := time.NewTicker(w.config.WorkerCheckInterval)
	defer ticker.Stop()

	// –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
	w.processSubscriptions()

	for {
		select {
		case <-ctx.Done():
			log.Println("üõë Subscription worker stopped")
			return
		case <-ticker.C:
			w.processSubscriptions()
		}
	}
}

// processSubscriptions –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–ª–∏—Ç—å –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
func (w *SubscriptionWorker) processSubscriptions() {
	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
	w.processRenewals()

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
	w.processRetries()

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
	w.processExpiredCancelledSubscriptions()
}

// processRenewals –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
func (w *SubscriptionWorker) processRenewals() {
	now := time.Now()
	utcNow := time.Now().UTC()
	if w.config.IsDevMode() {
		log.Printf("‚è∞ [DEV] Checking for subscriptions due for renewal... [NOW: %s, UTC: %s]",
			now.Format("2006-01-02 15:04:05"), utcNow.Format("2006-01-02 15:04:05"))
	} else {
		log.Printf("‚è∞ [PROD] Checking for subscriptions due for renewal... [NOW: %s, UTC: %s]",
			now.Format("2006-01-02 15:04:05"), utcNow.Format("2006-01-02 15:04:05"))
	}

	// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
	allActive, err := w.subscriptionService.GetAllActiveSubscriptions()
	if err != nil {
		log.Printf("‚ö†Ô∏è [DEBUG] Error getting all active subscriptions: %v", err)
	} else {
		log.Printf("üîç [DEBUG] All active subscriptions (%d):", len(allActive))
		for _, sub := range allActive {
			nextPaymentStr := "NULL"
			if sub.NextPayment != (time.Time{}) {
				nextPaymentStr = sub.NextPayment.Format("2006-01-02 15:04:05")
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –≤—Ä–µ–º—è next_payment
				isPast := sub.NextPayment.Before(now)
				isPastUTC := sub.NextPayment.Before(utcNow)
				timeDiff := now.Sub(sub.NextPayment)
				timeDiffUTC := utcNow.Sub(sub.NextPayment)

				nextRetryStr := "NULL"
				if sub.NextRetry != nil {
					nextRetryStr = sub.NextRetry.Format("2006-01-02 15:04:05")
				}

				log.Printf("   ID=%d, UserID=%d, Status=%s, NextPayment=%s, IsPast(local)=%v, IsPast(UTC)=%v, TimeDiff(local)=%v, TimeDiff(UTC)=%v, Active=%v, YKCustomerID=%v, YKPaymentMethodID=%v, FailedAttempts=%d, NextRetry=%s",
					sub.ID, sub.UserID, sub.Status, nextPaymentStr, isPast, isPastUTC, timeDiff, timeDiffUTC, sub.Active,
					sub.YKCustomerID != nil, sub.YKPaymentMethodID != nil, sub.FailedAttempts, nextRetryStr)
			} else {
				nextRetryStr := "NULL"
				if sub.NextRetry != nil {
					nextRetryStr = sub.NextRetry.Format("2006-01-02 15:04:05")
				}

				log.Printf("   ID=%d, UserID=%d, Status=%s, NextPayment=%s, Active=%v, YKCustomerID=%v, YKPaymentMethodID=%v, FailedAttempts=%d, NextRetry=%s",
					sub.ID, sub.UserID, sub.Status, nextPaymentStr, sub.Active,
					sub.YKCustomerID != nil, sub.YKPaymentMethodID != nil, sub.FailedAttempts, nextRetryStr)
			}
		}
	}

	subscriptions, err := w.subscriptionService.GetSubscriptionsDueForRenewal()
	if err != nil {
		log.Printf("‚ùå Error getting subscriptions for renewal: %v", err)
		return
	}

	if len(subscriptions) == 0 {
		if w.config.IsDevMode() {
			log.Printf("‚úÖ [DEV] No subscriptions due for renewal [NOW: %s]", now.Format("2006-01-02 15:04:05"))
		} else {
			log.Printf("‚úÖ [PROD] No subscriptions due for renewal [NOW: %s]", now.Format("2006-01-02 15:04:05"))
		}
	} else {
		log.Printf("üîÑ Found %d subscription(s) due for renewal", len(subscriptions))

		// –°–æ–∑–¥–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ YooKassa
		// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 3, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å YooKassa API
		const maxConcurrentPayments = 3
		semaphore := make(chan struct{}, maxConcurrentPayments)
		var wg sync.WaitGroup

		// –°—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
		var successCount, errorCount int32

		log.Printf("üí≥ [YooKassa] –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É %d –ø–æ–¥–ø–∏—Å–æ–∫ (–ª–∏–º–∏—Ç: %d)",
			len(subscriptions), maxConcurrentPayments)

		for _, sub := range subscriptions {
			wg.Add(1)

			go func(subscription *domain.Subscription) {
				defer wg.Done()

				// –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
				semaphore <- struct{}{}
				defer func() { <-semaphore }()

				startTime := time.Now()
				log.Printf("üí≥ [YooKassa] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d (ID: %d)",
					subscription.UserID, subscription.ID)

				// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
				if err := w.subscriptionService.ProcessRecurringPayment(subscription); err != nil {
					atomic.AddInt32(&errorCount, 1)
					log.Printf("‚ùå [YooKassa] Failed to process recurring payment for user %d: %v",
						subscription.UserID, err)
				} else {
					atomic.AddInt32(&successCount, 1)
					duration := time.Since(startTime)
					log.Printf("‚úÖ [YooKassa] Successfully processed recurring payment for user %d in %v",
						subscription.UserID, duration)
				}
			}(sub)
		}

		// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π
		wg.Wait()

		// –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
		finalSuccess := atomic.LoadInt32(&successCount)
		finalError := atomic.LoadInt32(&errorCount)
		log.Printf("üéâ [YooKassa] –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –£—Å–ø–µ—à–Ω–æ: %d, –û—à–∏–±–æ–∫: %d",
			finalSuccess, finalError)
	}
}

// processRetries –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã
func (w *SubscriptionWorker) processRetries() {
	now := time.Now()
	if w.config.IsDevMode() {
		log.Printf("üîÑ [DEV] Checking for subscriptions due for retry... [NOW: %s]", now.Format("2006-01-02 15:04:05"))
	} else {
		log.Printf("üîÑ [PROD] Checking for subscriptions due for retry... [NOW: %s]", now.Format("2006-01-02 15:04:05"))
	}

	subscriptions, err := w.subscriptionService.GetSubscriptionsDueForRetry()
	if err != nil {
		log.Printf("‚ùå Error getting subscriptions for retry: %v", err)
		return
	}

	if len(subscriptions) == 0 {
		if w.config.IsDevMode() {
			log.Printf("‚úÖ [DEV] No subscriptions due for retry [NOW: %s]", now.Format("2006-01-02 15:04:05"))
		} else {
			log.Printf("‚úÖ [PROD] No subscriptions due for retry [NOW: %s]", now.Format("2006-01-02 15:04:05"))
		}
	} else {
		log.Printf("üîÑ Found %d subscription(s) due for retry", len(subscriptions))

		// –°–æ–∑–¥–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
		const maxConcurrentRetries = 2 // –ú–µ–Ω—å—à–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
		semaphore := make(chan struct{}, maxConcurrentRetries)
		var wg sync.WaitGroup

		// –°—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
		var successCount, errorCount int32

		log.Printf("üîÑ [Retry] –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É %d –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ (–ª–∏–º–∏—Ç: %d)",
			len(subscriptions), maxConcurrentRetries)

		for _, sub := range subscriptions {
			wg.Add(1)

			go func(subscription *domain.Subscription) {
				defer wg.Done()

				// –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
				semaphore <- struct{}{}
				defer func() { <-semaphore }()

				startTime := time.Now()
				log.Printf("üîÑ [Retry] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d (ID: %d, –ü–æ–ø—ã—Ç–∫–∞: %d)",
					subscription.UserID, subscription.ID, subscription.FailedAttempts+1)

				// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
				if err := w.subscriptionService.ProcessRecurringPayment(subscription); err != nil {
					atomic.AddInt32(&errorCount, 1)
					log.Printf("‚ùå [Retry] Failed to retry payment for user %d: %v", subscription.UserID, err)
				} else {
					atomic.AddInt32(&successCount, 1)
					duration := time.Since(startTime)
					log.Printf("‚úÖ [Retry] Successfully retried payment for user %d in %v",
						subscription.UserID, duration)
				}
			}(sub)
		}

		// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
		wg.Wait()

		// –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
		finalSuccess := atomic.LoadInt32(&successCount)
		finalError := atomic.LoadInt32(&errorCount)
		log.Printf("üéâ [Retry] –í—Å–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –£—Å–ø–µ—à–Ω–æ: %d, –û—à–∏–±–æ–∫: %d",
			finalSuccess, finalError)
	}
}

// processExpiredCancelledSubscriptions –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
func (w *SubscriptionWorker) processExpiredCancelledSubscriptions() {
	now := time.Now()
	if w.config.IsDevMode() {
		log.Printf("‚è∞ [DEV] Checking for expired cancelled subscriptions... [NOW: %s]", now.Format("2006-01-02 15:04:05"))
	} else {
		log.Printf("‚è∞ [PROD] Checking for expired cancelled subscriptions... [NOW: %s]", now.Format("2006-01-02 15:04:05"))
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'cancelled'
	allActive, err := w.subscriptionService.GetAllActiveSubscriptions()
	if err != nil {
		log.Printf("‚ùå Error getting all active subscriptions: %v", err)
		return
	}

	expiredCount := 0
	for _, sub := range allActive {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
		if sub.Status == "cancelled" && sub.NextPayment.Before(now) {
			log.Printf("üîÑ Found expired cancelled subscription for user %d (expired at %s)",
				sub.UserID, sub.NextPayment.Format("2006-01-02 15:04:05"))

			// –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
			if err := w.subscriptionService.CancelExpiredSubscription(sub.UserID); err != nil {
				log.Printf("‚ùå Failed to cancel expired subscription for user %d: %v", sub.UserID, err)
			} else {
				log.Printf("‚úÖ Successfully cancelled expired subscription for user %d", sub.UserID)
				expiredCount++
			}
		}
	}

	if expiredCount > 0 {
		log.Printf("‚úÖ Processed %d expired cancelled subscription(s)", expiredCount)
	} else {
		if w.config.IsDevMode() {
			log.Printf("‚úÖ [DEV] No expired cancelled subscriptions found")
		} else {
			log.Printf("‚úÖ [PROD] No expired cancelled subscriptions found")
		}
	}
}
