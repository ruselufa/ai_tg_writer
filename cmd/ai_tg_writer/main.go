package main

import (
	"fmt"
	"log"
	"os"
	"strconv"

	"ai_tg_writer/internal/infrastructure/bot"
	"ai_tg_writer/internal/infrastructure/database" // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
	"ai_tg_writer/internal/infrastructure/voice"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
)

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
	fmt.Println("–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
	if err := godotenv.Load(); err != nil {
		log.Println("–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
	fmt.Println("–ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	if token == "" {
		log.Fatal("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}
	fmt.Println("–¢–æ–∫–µ–Ω –±–æ—Ç–∞: ", token)
	// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
	botAPI, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println("–≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω")
	botAPI.Debug = true
	log.Printf("–ë–æ—Ç %s –∑–∞–ø—É—â–µ–Ω", botAPI.Self.UserName)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	fmt.Println("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
	db, err := database.NewConnection()
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}
	fmt.Println("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã
	if err := db.InitTables(); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü: %v", err)
	}
	fmt.Println("–¢–∞–±–ª–∏—Ü—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
	// –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
	customBot := bot.NewBot(botAPI, db)
	voiceHandler := voice.NewVoiceHandler(botAPI)
	stateManager := bot.NewStateManager(db)
	inlineHandler := bot.NewInlineHandler(stateManager, voiceHandler)
	messageHandler := bot.NewMessageHandler(stateManager, voiceHandler)
	fmt.Println("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω—ã")
	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	updateConfig := tgbotapi.NewUpdate(0)
	updateConfig.Timeout = 60
	fmt.Println("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
	updates := botAPI.GetUpdatesChan(updateConfig)
	fmt.Println("–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã")
	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
	for update := range updates {
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
		if update.CallbackQuery != nil {
			inlineHandler.HandleCallback(customBot, update.CallbackQuery)
			continue
		}
		fmt.Println("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
		if update.Message == nil {
			continue
		}
		fmt.Println("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ MessageHandler
		if update.Message.Voice != nil {
			messageHandler.HandleMessage(customBot, update.Message)
			continue
		}
		fmt.Println("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
		handleMessage(customBot, update.Message, voiceHandler, stateManager, inlineHandler)
	}
}

// handleMessage —Ç–µ–ø–µ—Ä—å –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é
func handleMessage(bot *bot.Bot, message *tgbotapi.Message, voiceHandler *voice.VoiceHandler, stateManager *bot.StateManager, inlineHandler *bot.InlineHandler) {
	// –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	log.Printf("[%s] %s", message.From.UserName, message.Text)
	fmt.Println("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã")
	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
	if message.IsCommand() {
		handleCommand(bot, message)
		return
	}
	fmt.Println("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	handleTextMessage(bot, message, stateManager)
}

func handleCommand(bot *bot.Bot, message *tgbotapi.Message) {
	switch message.Command() {
	case "start":
		sendWelcomeMessage(bot, message.Chat.ID)
	case "help":
		sendHelpMessage(bot, message.Chat.ID)
	case "profile":
		sendProfileMessage(bot, message.Chat.ID, message.From.ID)
	case "subscription":
		sendSubscriptionMessage(bot, message.Chat.ID)
	case "admin":
		handleAdminCommand(bot, message)
	default:
		sendUnknownCommandMessage(bot, message.Chat.ID)
	}
}

func handleVoiceMessage(bot *bot.Bot, message *tgbotapi.Message, voiceHandler *voice.VoiceHandler, stateManager *bot.StateManager, inlineHandler *bot.InlineHandler) {
	userID := message.From.ID
	state := stateManager.GetState(userID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –±–æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if !state.WaitingForVoice {
		// –ï—Å–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
		processingMsg := tgbotapi.NewMessage(message.Chat.ID, "üéµ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
		processingMsg.ReplyToMessageID = message.MessageID
		bot.Send(processingMsg)

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		resultText, err := voiceHandler.ProcessVoiceMessage(message)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
			errorMsg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
			bot.Send(errorMsg)
			return
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		resultMsg := tgbotapi.NewMessage(message.Chat.ID, resultText)
		bot.Send(resultMsg)
		return
	}

	// –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–∞–º–∫–∞—Ö —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
	processingMsg := tgbotapi.NewMessage(message.Chat.ID, "üéµ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
	processingMsg.ReplyToMessageID = message.MessageID
	bot.Send(processingMsg)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	resultText, err := voiceHandler.ProcessVoiceMessage(message)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		errorMsg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
		bot.Send(errorMsg)
		return
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	stateManager.AddVoiceMessage(userID, resultText)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
	keyboard := bot.CreateContinueKeyboard()
	msg := tgbotapi.NewMessage(message.Chat.ID, "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∫—Ç–æ–≤–∫—É –∏–ª–∏ —É–∂–µ –Ω–∞—á–∏–Ω–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞?")
	msg.ReplyMarkup = &keyboard
	bot.Send(msg)

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	stateManager.SetWaitingForVoice(userID, false)
}

func handleTextMessage(bot *bot.Bot, message *tgbotapi.Message, stateManager *bot.StateManager) {
	userID := message.From.ID
	state := stateManager.GetState(userID)

	// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
	if state.CurrentStep != "idle" {
		response := tgbotapi.NewMessage(message.Chat.ID,
			"üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º–∏ –∏–¥–µ—è–º–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞.")
		bot.Send(response)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –±–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	response := tgbotapi.NewMessage(message.Chat.ID,
		"üëã –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–ø–∏—à—É –µ–≥–æ –≤ –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç!\n\n"+
			"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"+
			"/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"+
			"/help - –ü–æ–º–æ—â—å\n"+
			"/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"+
			"/subscription - –ü–æ–¥–ø–∏—Å–∫–∞")

	bot.Send(response)
}

func sendWelcomeMessage(bot *bot.Bot, chatID int64) {
	text := `–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å –º–æ—â–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ —Ç–≤–æ–∏—Ö –∏–¥–µ–π. –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å:`

	keyboard := bot.CreateMainKeyboard()
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = &keyboard
	bot.Send(msg)
}

func sendHelpMessage(bot *bot.Bot, chatID int64) {
	text := `üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª—é–±–æ–π –¥–ª–∏–Ω—ã
‚Ä¢ –Ø —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å –∏ –ø–µ—Ä–µ–ø–∏—à—É –µ—ë –∫—Ä–∞—Å–∏–≤–æ
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —è–∑—ã–∫–∏

üìä –õ–∏–º–∏—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ: 5 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å
‚Ä¢ –ü—Ä–µ–º–∏—É–º —Ç–∞—Ä–∏—Ñ: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ

üë§ –ü—Ä–æ—Ñ–∏–ª—å (/profile):
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è`

	msg := tgbotapi.NewMessage(chatID, text)
	bot.Send(msg)
}

func sendProfileMessage(bot *bot.Bot, chatID int64, userID int64) {
	text := `üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å

üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ` + strconv.FormatInt(userID, 10) + `
üìä –¢–∞—Ä–∏—Ñ: –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π
üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: 0/5`

	msg := tgbotapi.NewMessage(chatID, text)
	bot.Send(msg)
}

func sendSubscriptionMessage(bot *bot.Bot, chatID int64) {
	text := `üíé –ü–æ–¥–ø–∏—Å–∫–∞

üìä –¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π
‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –ë–µ—Å—Å—Ä–æ—á–Ω–æ

‚ú® –ü—Ä–µ–º–∏—É–º —Ç–∞—Ä–∏—Ñ:
‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º

üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: 299‚ÇΩ/–º–µ—Å—è—Ü`

	msg := tgbotapi.NewMessage(chatID, text)
	bot.Send(msg)
}

func sendUnknownCommandMessage(bot *bot.Bot, chatID int64) {
	text := "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."

	msg := tgbotapi.NewMessage(chatID, text)
	bot.Send(msg)
}

func handleAdminCommand(bot *bot.Bot, message *tgbotapi.Message) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	isAdmin, err := bot.DB.IsAdmin(message.From.ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
		bot.Send(msg)
		return
	}

	if !isAdmin {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
		bot.Send(msg)
		return
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/reset_limits [user_id] - –°–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/add_admin [user_id] - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
	bot.Send(msg)
}
