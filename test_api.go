package main

import (
	"fmt"
	"log"
	"os"
	"time"

	"ai_tg_writer/internal/infrastructure/whisper"
)

func main() {
	if len(os.Args) < 2 {
		fmt.Println("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: go run test_api.go <–ø—É—Ç—å_–∫_–∞—É–¥–∏–æ_—Ñ–∞–π–ª—É>")
		os.Exit(1)
	}

	audioPath := os.Args[1]

	// –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Whisper
	whisperHandler := whisper.NewWhisperHandler()

	fmt.Printf("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é: %s\n", audioPath)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
	transcriptionResp, err := whisperHandler.TranscribeAudio(audioPath)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é: %v", err)
	}

	fmt.Printf("–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é:\n")
	fmt.Printf("  File ID: %s\n", transcriptionResp.FileID)
	fmt.Printf("  –°—Ç–∞—Ç—É—Å: %s\n", transcriptionResp.Status)
	fmt.Printf("  –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: %d\n", transcriptionResp.QueuePosition)
	fmt.Printf("  –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: %d\n", transcriptionResp.Metrics.QueueSize)
	fmt.Printf("  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: %.2f —Å–µ–∫\n", transcriptionResp.Metrics.AvgProcessingTime)

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
	fmt.Println("\n–û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏...")
	transcribedText, err := whisperHandler.WaitForCompletion(transcriptionResp.FileID, 5*time.Minute)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: %v", err)
	}

	fmt.Printf("\n‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n")
	fmt.Printf("üìù –†–µ–∑—É–ª—å—Ç–∞—Ç:\n%s\n", transcribedText)
}
